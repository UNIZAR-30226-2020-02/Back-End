Index: playstackDjango/App/PlayStack/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib.auth.models import User\nfrom django.db import models\nfrom django.contrib.auth.base_user import AbstractBaseUser\nfrom django.conf import settings\nfrom .functions import *\nimport binascii\n\n# Create your models here.\n\nclass Usuario(models.Model):\n    ID = models.AutoField(primary_key=True)\n    NombreUsuario = models.CharField(max_length=300, null=False, unique=True)\n    Contrasenya = models.CharField(max_length=300, null=False)\n    Correo = models.CharField(max_length=300, null=False, unique=True)\n    FotoDePerfil = models.ImageField(null=True, blank=True, upload_to='images')\n    Seguidos = models.ManyToManyField('self', through='Relacion', blank=True, symmetrical=False,\n                                      related_name='Seguidores')\n    SolicitudAmistad = models.ManyToManyField('self', through='Peticiones', blank=True, symmetrical=False,\n                                              related_name='Solicitudes')\n\n    def __str__(self):\n        return decrypt(binascii.unhexlify(self.NombreUsuario)).decode('ascii')\n\n    def getFotoDePerfil(self, httphost):\n        return 'https://' + httphost + settings.MEDIA_URL + self.FotoDePerfil.name\n\n    # Marca al usuario self como seguidor de user\n    def follow(self, user):\n        relacion, created = Relacion.objects.get_or_create(\n            fromUser=self,\n            toUser=user)\n        return relacion\n\n    # Anyade una peticion del usuario self al usuario user\n    def addRequest(self, user):\n        peticion, created = Peticiones.objects.get_or_create(\n            fromUser=self,\n            toUser=user)\n        return peticion\n\n    # El usuario self deja de seguir al usuario user\n    def unFollow(self, user):\n        Relacion.objects.filter(\n            fromUser=self,\n            toUser=user).delete()\n\n    # Eliminar peticion, elimina la peticion del usuario self al usuario user\n    # hay que invocarlo al aceptar o rechazar\n    def removeRequest(self, user):\n        Peticiones.objects.filter(\n            fromUser=self,\n            toUser=user).delete()\n\n    def getFollowing(self):\n        return self.Seguidos.filter(\n            to_users__fromUser=self)\n\n    def getFollowers(self):\n        return self.Seguidores.filter(\n            from_users__toUser=self)\n\n    def getRequests(self):\n        return self.Solicitudes.filter(\n            from_usr__toUser=self)\n\n\n# Almacena a quien sigue el usuario fromUser\nclass Relacion(models.Model):\n    fromUser = models.ForeignKey(Usuario, related_name='from_users', on_delete=models.CASCADE)\n    toUser = models.ForeignKey(Usuario, related_name='to_users', on_delete=models.CASCADE)\n\n    def __str__(self):\n        return str(self.fromUser) + ' sigue a ' + str(self.toUser)\n\n\n# decrypt(binascii.unhexlify(self.fromUser.NombreUsuario).decode('ascii') + ' sigue a ' + decrypt(binascii.unhexlify(self.toUser.NombreUsuario).decode('ascii')\n\n\n# Almacena a quien quiere seguir el usuario fromUser\nclass Peticiones(models.Model):\n    fromUser = models.ForeignKey(Usuario, related_name='from_usr', on_delete=models.CASCADE)\n    toUser = models.ForeignKey(Usuario, related_name='to_usr', on_delete=models.CASCADE)\n\n    def __str__(self):\n        return str(self.fromUser) + ' quiere seguir a ' + str(self.toUser)\n\n\nclass Premium(models.Model):\n    UsuarioRegistrado = models.OneToOneField(Usuario, null=False, blank=False, on_delete=models.CASCADE,\n                                             related_name='Premium')\n\n    def __str__(self):\n        return str(self.UsuarioRegistrado)\n\n\nclass NoPremium(models.Model):\n    # WARNING: Es posible que falte la reestriccion de max y min\n    UsuarioRegistrado = models.OneToOneField(Usuario, null=False, blank=False, on_delete=models.CASCADE,\n                                             related_name='NoPremium')\n    NumSalt = models.IntegerField()\n    pidePremium = models.BooleanField(null=False, default=False)\n\n    def __str__(self):\n        return str(self.UsuarioRegistrado)\n\n\nclass CreadorContenido(models.Model):\n    UsuarioRegistrado = models.OneToOneField(Usuario, null=False, blank=False, on_delete=models.CASCADE,\n                                             related_name='CreadorContenido')\n\n    def __str__(self):\n        return str(self.UsuarioRegistrado)\n\n\nclass Audio(models.Model):\n    ID = models.AutoField(primary_key=True)\n    FicheroDeAudio = models.FileField(null=False, upload_to='audio')\n    Titulo = models.CharField(max_length=50, null=False)\n    Idioma = models.CharField(max_length=15, null=False)\n    Duracion = models.DecimalField(max_digits=5, decimal_places=2, null=True, blank=True)\n    CreadorDeContenido = models.ForeignKey(CreadorContenido, null=False, blank=False,\n                                           on_delete=models.CASCADE)\n\n    class Meta:\n        unique_together = ('ID', 'CreadorDeContenido')\n\n    def __str__(self):\n        return self.Titulo\n\n    def getURL(self, httphost):\n        return 'https://' + httphost + settings.MEDIA_URL + self.FicheroDeAudio.name\n\n\nclass Cancion(models.Model):\n    AudioRegistrado = models.OneToOneField(Audio, null=False, blank=False, on_delete=models.CASCADE)\n    UsuariosComoFavorita = models.ManyToManyField(Usuario, blank=True, related_name='Favoritas')\n\n    def __str__(self):\n        formato = 'Cancion {0} subida por {1}'\n        return formato.format(self.AudioRegistrado.Titulo, self.AudioRegistrado.CreadorDeContenido)\n\n    def getURL(self, httphost):\n        return 'https://' + httphost + settings.MEDIA_URL + self.AudioRegistrado.FicheroDeAudio.name\n\n\nclass Artista(models.Model):\n    ID = models.AutoField(primary_key=True)\n    Nombre = models.CharField(max_length=30, unique=True)\n    Foto = models.ImageField(upload_to='images')\n    PaisDeNacimiento = models.CharField(max_length=30)\n    Canciones = models.ManyToManyField(Cancion, blank=True, related_name='Artistas')\n\n    def __str__(self):\n        return self.Nombre\n\n    def getFoto(self, httphost):\n        return 'https://' + httphost + settings.MEDIA_URL + self.Foto.name\n\n\nclass Album(models.Model):\n    ID = models.AutoField(primary_key=True)\n    NombreAlbum = models.CharField(max_length=100, null=False)\n    Canciones = models.ManyToManyField(Cancion, blank=False, related_name='Albunes')\n    FotoDelAlbum = models.ImageField(upload_to='images')\n    Fecha = models.DateField(null=False)\n\n    def __str__(self):\n        return self.NombreAlbum\n\n    def getFotoDelAlbum(self, httphost):\n        return 'https://' + httphost + settings.MEDIA_URL + self.FotoDelAlbum.name\n\n\nclass Genero(models.Model):\n    ID = models.AutoField(primary_key=True)\n    Nombre = models.CharField(max_length=100, null=False)\n    # Por el momento se puden crear Geenros vacios\n    Canciones = models.ManyToManyField(Cancion, blank=True, related_name='Generos')\n    Foto = models.ImageField(upload_to='images')\n\n    def __str__(self):\n        return self.Nombre\n\n    def getFoto(self, httphost):\n        return 'https://' + httphost + settings.MEDIA_URL + self.Foto.name\n\nclass PlayList(models.Model):\n    ID = models.AutoField(primary_key=True)\n    Nombre = models.CharField(max_length=30, null=False)\n    Privado = models.BooleanField(null=False)\n    UsuarioNombre = models.ForeignKey(Usuario, null=False, blank=False, on_delete=models.CASCADE)\n    Canciones = models.ManyToManyField(Cancion, blank=True, related_name='PlayLists')\n\n    class Meta:\n        unique_together = ('ID', 'UsuarioNombre')\n\n    def __str__(self):\n        formato = 'Playlist {0} del usuario {1}'\n        return formato.format(self.Nombre, self.UsuarioNombre)\n\n\nclass Carpeta(models.Model):\n    ID = models.AutoField(primary_key=True)\n    Nombre = models.CharField(max_length=30, null=False)\n    PlayList = models.ManyToManyField(PlayList, blank=True, related_name='Carpetas')\n\n    def __str__(self):\n        formato = 'Carpeta {0}'\n        return formato.format(self.Nombre)\n\n\nclass Capitulo(models.Model):\n    AudioRegistrado = models.OneToOneField(Audio, null=False, blank=False, on_delete=models.CASCADE)\n    Fecha = models.DateTimeField(null=False)\n    #NumCap = models.IntegerField(null=False,blank=False)\n\n    def __str__(self):\n        formato = 'Capitulo {0} subida por {1}'\n        return formato.format(self.AudioRegistrado.Titulo, self.AudioRegistrado.CreadorDeContenido)\n\n    def getURL(self, httphost):\n        return 'https://' + httphost + settings.MEDIA_URL + self.AudioRegistrado.FicheroDeAudio.name\n\n    def getPodcast(self):\n        return Podcast.objects.get(Capitulos=self)\n\nclass Tematica(models.Model):\n    ID = models.AutoField(primary_key=True)\n    Nombre = models.CharField(max_length=30, null=False, unique=True)\n\n    def __str__(self):\n        return self.Nombre\n\nclass Podcast(models.Model):\n    Nombre = models.CharField(max_length=50, null=False)\n    Descripcion = models.TextField(null=False)\n    Subscriptores = models.ManyToManyField(Usuario, blank=True, related_name='Suscrito')\n    Capitulos = models.ManyToManyField(Capitulo, blank=True, related_name='Capitulos')\n    FotoDelPodcast = models.ImageField(upload_to='images')\n    Tematica = models.ForeignKey(Tematica, null=True, blank=True,on_delete=models.CASCADE, related_name='Tematica')\n\n    def __str__(self):\n        return self.Nombre\n    def getFotoDelPodcast(self, httphost):\n        return 'https://' + httphost + settings.MEDIA_URL + self.FotoDelPodcast.name\n\nclass Interlocutor(models.Model):\n    Nombre = models.CharField(max_length=50, null=False)\n    Podcasts = models.ManyToManyField(Podcast, blank=True, related_name='Participan')\n\n    def __str__(self):\n        return self.Nombre\n\n\nclass AudioEscuchado(models.Model):\n    ID = models.AutoField(primary_key=True)\n    Usuario = models.ForeignKey(Usuario, null=False, blank=False, on_delete=models.CASCADE)\n    Audio = models.ForeignKey(Audio, null=False, blank=False, on_delete=models.CASCADE)\n    TimeStamp = models.DateTimeField(null=False)\n\n    def __str__(self):\n        formato = 'Audio {0} escuchado por {1} en el instante {2}'\n        return formato.format(self.Audio.Titulo, str(self.Usuario), self.TimeStamp)\n\n    class Meta:\n        unique_together = ('Usuario', 'Audio', 'TimeStamp')\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- playstackDjango/App/PlayStack/models.py	(revision c789f6e5e81ad778d8397a2142e01e7267208927)
+++ playstackDjango/App/PlayStack/models.py	(date 1590251108697)
@@ -130,9 +130,10 @@
     def getURL(self, httphost):
         return 'https://' + httphost + settings.MEDIA_URL + self.FicheroDeAudio.name
 
+# Cancion.objects.all().values('AudioRegistrado')
 
 class Cancion(models.Model):
-    AudioRegistrado = models.OneToOneField(Audio, null=False, blank=False, on_delete=models.CASCADE)
+    AudioRegistrado = models.OneToOneField(Audio, null=False, blank=False, on_delete=models.CASCADE,related_name='Canciones')
     UsuariosComoFavorita = models.ManyToManyField(Usuario, blank=True, related_name='Favoritas')
 
     def __str__(self):
Index: playstackDjango/App/PlayStack/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from rest_framework import status\nfrom rest_framework.response import Response\nfrom rest_framework.decorators import api_view\nfrom rest_framework.decorators import parser_classes\nfrom django.http import JsonResponse\nfrom django.conf import settings\nfrom rest_framework.parsers import JSONParser\nfrom django.db.models import Q\nfrom .serializer import *\nfrom .models import *\nfrom .forms import *\nimport math\nimport os\nimport binascii\nimport re\nfrom .functions import *\nfrom django.db.models import Count\nimport datetime\nimport json\n\n# Permite la creacion de usuarios especificando su tipo\n# pasando los campos del cuerpo al serializer\n@api_view(['POST'])\n@parser_classes([JSONParser])\ndef CreateUser(request):\n    inform = [{'inform': ''}]\n    if request.method == \"POST\":\n\n        request.data['Contrasenya'] = encrypt(str.encode(request.data['Contrasenya'])).hex()\n        request.data['NombreUsuario'] = encrypt(str.encode(request.data['NombreUsuario'])).hex()\n        request.data['Correo'] = encrypt(str.encode(request.data['Correo'])).hex()\n        nuevoUsuario = UsuarioSerializer(data=request.data)\n\n        if nuevoUsuario.is_valid():\n\n            nuevoUsuario.save()\n            user = Usuario.objects.get(NombreUsuario=request.data['NombreUsuario'])\n            NoPremium(UsuarioRegistrado=user, NumSalt=10).save()\n            inform[0] = 'Creado correctamente'\n            return JsonResponse(inform, safe=False, status=status.HTTP_201_CREATED)\n\n        else:\n            inform[0] = 'Campos invalidos'\n            return JsonResponse(inform, safe=False, status=status.HTTP_201_CREATED)\n\n    else:\n        inform[0] = 'La peticion debe ser POST'\n        return JsonResponse(inform, safe=False, status=status.HTTP_201_CREATED)\n\n\n# Permite la creacion de usuarios con una imagen\n# de perfil\n@api_view(['POST'])\ndef CreateUserImg(request):\n    inform = [{'inform': ''}]\n\n    if request.method == 'POST':\n        request.data['Contrasenya'] = encrypt(str.encode(request.data['Contrasenya'])).hex()\n        request.data['NombreUsuario'] = encrypt(str.encode(request.data['NombreUsuario'])).hex()\n        request.data['Correo'] = encrypt(str.encode(request.data['Correo'])).hex()\n        form = UserForm(request.data, request.FILES)\n        if form.is_valid():\n            form.save()\n            inform[0] = 'Creado correctamente'\n            return JsonResponse(inform, safe=False, status=status.HTTP_200_OK)\n        else:\n            inform[0] = 'Campos invalidos'\n            return JsonResponse(inform, safe=False, status=status.HTTP_400_BAD_REQUEST)\n    else:\n        inform[0] = 'La peticion debe ser POST'\n        return JsonResponse(inform, safe=False, status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Permite la creacion de usuarios especificando su tipo\n# pasando los campos del cuerpo al serializer\n@api_view(['POST'])\n@parser_classes([JSONParser])\ndef Login(request):\n    inform = [{'inform': ''}]\n\n    if request.method == \"POST\":\n\n        try:\n\n            hashname = encrypt(str.encode(request.data['NombreUsuario'])).hex()\n            hashpassword = encrypt(str.encode(request.data['Contrasenya'])).hex()\n            usuario = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n\n        except Usuario.DoesNotExist:\n\n            inform[0] = 'Usuario no registrado'\n            return JsonResponse(inform, safe=False, status=status.HTTP_404_NOT_FOUND)\n\n        except KeyError:\n\n            inform[0] = 'Los campos del request estan mal escirtos'\n            JsonResponse(inform, safe=False, status=status.HTTP_400_BAD_REQUEST)\n\n        if usuario.Contrasenya != hashpassword:\n            inform[0] = 'Contraseña incorrecta'\n            return JsonResponse(inform, safe=False, status=status.HTTP_401_UNAUTHORIZED)\n\n        inform[0] = 'Usuario autenticado correctamente'\n        return JsonResponse(inform, safe=False, status=status.HTTP_200_OK)\n\n    else:\n\n        inform[0] = 'Solo validas peticiones POST'\n        JsonResponse(inform, safe=False, status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Permite la actualizacion de\n# la imegen de un usuario\n@api_view(['POST'])\ndef UpdatePerfilImage(request):\n    if request.method == \"POST\":\n\n        try:\n\n            hashname = encrypt(str.encode(request.data['NombreUsuario'])).hex()\n            user = Usuario.objects.get(NombreUsuario=hashname)\n            user.FotoDePerfil = request.FILES['NuevaFoto']\n            user.save()\n            # De este modo no se gurdan las imagens en /images\n            # Usuario.objects.filter(NombreUsuario=request.data['NombreUsuario']).update(FotoDePerfil=request.FILES['NuevaFoto'])\n            return Response(status=status.HTTP_200_OK)\n\n        except Usuario.DoesNotExist:\n\n            return Response(status=status.HTTP_404_NOT_FOUND)\n\n        except KeyError:\n\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Retorna la URL de la cancion solicitada cuyo titulo\n# se especifica en el\n@api_view(['GET'])\n@parser_classes([JSONParser])\ndef GetAudio(request):\n    if request.method == \"GET\":\n\n        try:\n            audio = Audio.objects.get(Titulo=request.query_params['Titulo'])\n\n        except Audio.DoesNotExist:\n\n            return Response(status=status.HTTP_404_NOT_FOUND)\n\n        data = [{'URL': audio.getURL(request.META['HTTP_HOST'])}]\n        return JsonResponse(data, safe=False, status=status.HTTP_200_OK)\n\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Recuoera una cancion de la\n# de base de datos\n@api_view(['GET'])\n@parser_classes([JSONParser])\ndef GetSong(request):\n    if request.method == \"GET\":\n\n        try:\n\n            cancion = Cancion.objects.get(AudioRegistrado__Titulo=request.query_params['Titulo'])\n\n        except Audio.DoesNotExist:\n\n            return Response(status=status.HTTP_404_NOT_FOUND)\n\n        data = [{'URL': cancion.getURL(request.META['HTTP_HOST'])}]\n        return JsonResponse(data, safe=False, status=status.HTTP_200_OK)\n\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Recupera un podcast de la base\n# de datos\n@api_view(['GET'])\n@parser_classes([JSONParser])\ndef GetPodcastChapter(request):\n    if request.method == \"GET\":\n\n        try:\n\n            capitulo = Capitulo.objects.get(AudioRegistrado__Titulo=request.query_params['Titulo'])\n\n        except Audio.DoesNotExist:\n\n            return Response(status=status.HTTP_404_NOT_FOUND)\n\n        data = [{'URL': capitulo.getURL(request.META['HTTP_HOST'])}]\n        return JsonResponse(data, safe=False, status=status.HTTP_200_OK)\n\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n@api_view(['POST'])\n@parser_classes([JSONParser])\ndef GivePermissions(request):\n    if request:\n\n        try:\n\n            hashname = encrypt(str.encode(request.data['NombreUsuario'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n\n            if request.data['Tipo'] == 'NoPremium':\n\n                NoPremium(UsuarioRegistrado=user, NumSalt=10).save()\n                return Response(status=status.HTTP_200_OK)\n\n            elif request.data['Tipo'] == 'Premium':\n\n                Premium(UsuarioRegistrado=user).save()\n                return Response(status=status.HTTP_200_OK)\n\n            elif request.data['Tipo'] == 'CreadorDeContenido':\n\n                CreadorContenido(UsuarioRegistrado=user).save()\n                return Response(status=status.HTTP_200_OK)\n\n            else:\n\n                return Response(status=status.HTTP_400_BAD_REQUEST)\n\n\n        except Usuario.DoesNotExist:\n\n            return Response(status=status.HTTP_404_NOT_FOUND)\n\n        except KeyError:\n\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n@api_view(['POST'])\n@parser_classes([JSONParser])\ndef UpdatePermissions(request):\n    if request.method == \"POST\":\n\n        try:\n\n            hashname = encrypt(str.encode(request.data['NombreUsuario'])).hex()\n            user = Usuario.objects.get(NombreUsuario=hashname)\n\n            if NoPremium.objects.filter(UsuarioRegistrado=user).exists():\n\n                if request.data['NuevoTipo'] == 'NoPremium':\n\n                    return Response(status=status.HTTP_304_NOT_MODIFIED)\n\n                else:\n\n                    NoPremium.objects.filter(UsuarioRegistrado=user).delete()\n\n            elif Premium.objects.filter(UsuarioRegistrado__NombreUsuario=hashname).exists():\n\n                if request.data['NuevoTipo'] == 'Premium':\n                    return Response(status=status.HTTP_304_NOT_MODIFIED)\n                else:\n                    Premium.objects.filter(UsuarioRegistrado=user).delete()\n\n            elif CreadorContenido.objects.filter(UsuarioRegistrado__NombreUsuario=hashname).exists():\n\n                if request.data['NuevoTipo'] == 'CreadorContenido':\n                    return Response(status=status.HTTP_304_NOT_MODIFIED)\n                else:\n                    CreadorContenido.objects.filter(UsuarioRegistrado=user).delete()\n\n            else:\n\n                return Response(status=status.HTTP_404_NOT_FOUND)\n\n        except KeyError:\n\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n\n        except Usuario.DoesNotExist:\n\n            return Response(status=status.HTTP_404_NOT_FOUND)\n\n        if request.data['NuevoTipo'] == 'CreadorContenido':\n\n            CreadorContenido.objects.filter(UsuarioRegistrado=user).save()\n\n        elif request.data['NuevoTipo'] == 'Premium':\n\n            Premium.objects.filter(UsuarioRegistrado=user).save()\n\n        elif request.data['NuevoTipo'] == 'NoPremium':\n\n            NoPremium.objects.filter(UsuarioRegistrado=user).save()\n\n        else:\n\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n\n        return Response(status=status.HTTP_200_OK)\n\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n@api_view(['GET'])\n@parser_classes([JSONParser])\ndef GetUserInfo(request):\n    data = {'NombreUsuario': '', 'Correo': ''}\n\n    if request.method == \"GET\":\n\n        try:\n\n            hashname = encrypt(str.encode(request.query_params['NombreUsuario'])).hex()\n            print(hashname)\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            data['NombreUsuario'] = decrypt(binascii.unhexlify(user.NombreUsuario)).decode('ascii')\n            data['Correo'] = decrypt(binascii.unhexlify(user.Correo)).decode('ascii')\n            return JsonResponse(data, safe=False, status=status.HTTP_200_OK)\n\n        except Usuario.DoesNotExist:\n\n            return Response(tatus=status.HTTP_404_NOT_FOUND)\n\n        except KeyError:\n\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Actualiza los campos del usuario\n@api_view(['POST'])\n@parser_classes([JSONParser])\ndef UpdateUserFields(request):\n    if request.method == \"POST\":\n\n        try:\n\n            hashname = encrypt(str.encode(request.data['NombreUsuarioActual'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            user.NombreUsuario = encrypt(str.encode(request.data['NuevoNombreUsuario'])).hex()\n            user.save()\n            # Podria hacerse con update(No probado)\n            # Usuario.objects.filter(NombreUsuario=request.data['NombreUsuario']).update(FotoDePerfil=request.FILES['NuevaFoto'])\n            return Response(status=status.HTTP_200_OK)\n\n        except Usuario.DoesNotExist:\n\n            return Response(status=status.HTTP_404_NOT_FOUND)\n\n        except  KeyError:\n\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Devuelve todos los usuarios existentes\n# en la base de datos\n@api_view(['GET'])\ndef GetAllUser(request):\n    if request.method == \"GET\":\n        # Obtencion de todos los objetos de tipo usuario\n        users = Usuario.objects.all()\n        # Creacion de un serializer para generar la respuesta\n        serializer = UsuarioSerializer(users, many=True)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Devuelve todas las canciones almacenada\n# en la base de datos\n@api_view(['GET'])\ndef GetAllSongs(request):\n    if request.method == \"GET\":\n\n        listOfArtists = []\n        listOfGenders = []\n        listOfAlbuns = []\n        listOfImages = []\n        listOfSongs = []\n        data = {}\n        songs = Cancion.objects.all()\n        hashname = encrypt(str.encode(request.data['NombreUsuario'])).hex()\n        user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n        for index in range(songs.count()):\n\n            artistsOfSong = songs[index].Artistas.all()\n            for index2 in range(artistsOfSong.count()):\n                listOfArtists += [artistsOfSong[index2].Nombre]\n            albunsOfSong = songs[index].Albunes.all()\n            for index3 in range(albunsOfSong.count()):\n                listOfAlbuns += [albunsOfSong[index3].NombreAlbum]\n                listOfImages += [albunsOfSong[index3].getFotoDelAlbum(request.META['HTTP_HOST'])]\n\n            gendersOfSong = songs[index].Generos.all()\n            for index4 in range(gendersOfSong.count()):\n                listOfGenders += [gendersOfSong[index4].Nombre]\n            listOfSongs += [dict.fromkeys({'Artistas', 'url', 'Albumes', 'ImagenesAlbum', 'Generos','EsFavorita'})]\n            listOfSongs[index]['Artistas'] = listOfArtists\n            listOfSongs[index]['url'] = songs[index].getURL(request.META['HTTP_HOST'])\n            listOfSongs[index]['Albumes'] = listOfAlbuns\n            listOfSongs[index]['ImagenesAlbums'] = listOfImages\n            listOfSongs[index]['Generos'] = listOfGenders\n            listOfSongs[index]['EsFavorita'] = user in songs[index].UsuariosComoFavorita.all()\n            data[songs[index].AudioRegistrado.Titulo] = listOfSongs[index]\n            listOfArtists = []\n            listOfGenders = []\n            listOfAlbuns = []\n            listOfImages = []\n\n        return JsonResponse(data, safe=False, status=status.HTTP_200_OK)\n\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Devuelve todas las canciones\n# de un determinado genero\n@api_view(['GET'])\n@parser_classes([JSONParser])\ndef GetSongByGenre(request):\n    if request.method == \"GET\":\n\n        try:\n\n            listaOfArtists = []\n            listOfAlbuns = []\n            listOfGeneros = []\n            listOfImages = []\n            listOfSongs = []\n            data = {}\n            songs = Genero.objects.get(Nombre=request.query_params['NombreGenero']).Canciones.all()\n            hashname = encrypt(str.encode(request.query_params['Usuario'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            for index in range(songs.count()):\n\n                artistsOfSong = songs[index].Artistas.all()\n                for index2 in range(artistsOfSong.count()):\n                    listaOfArtists += [artistsOfSong[index2].Nombre]\n                    print(artistsOfSong[index2].Nombre)\n                    print(listaOfArtists)\n                albunsOfSong = songs[index].Albunes.all()\n                for index3 in range(albunsOfSong.count()):\n                    listOfAlbuns += [albunsOfSong[index3].NombreAlbum]\n                    listOfImages += [albunsOfSong[index3].getFotoDelAlbum(request.META['HTTP_HOST'])]\n                genreOfSong = Genero.objects.filter(Canciones=songs[index])\n                for index4 in genreOfSong:\n                    listOfGeneros.append(index4.Nombre)\n\n                listOfSongs += [dict.fromkeys({'Artistas', 'url', 'Albumes', 'ImagenesAlbum', 'EsFavorita'})]\n                listOfSongs[index]['Artistas'] = listaOfArtists\n                listOfSongs[index]['url'] = songs[index].getURL(request.META['HTTP_HOST'])\n                listOfSongs[index]['Albumes'] = listOfAlbuns\n                listOfSongs[index]['ImagenesAlbum'] = listOfImages\n                listOfSongs[index]['Generos'] = listOfGeneros\n                listOfSongs[index]['EsFavorita'] = songs[index].UsuariosComoFavorita.all().filter(\n                    NombreUsuario=hashname).exists()\n                data[songs[index].AudioRegistrado.Titulo] = listOfSongs[index]\n                listaOfArtists = []\n                listOfAlbuns = []\n                listOfImages = []\n                listOfGeneros = []\n\n            return JsonResponse(data, safe=False, status=status.HTTP_200_OK)\n\n        except Genero.DoesNotExist:\n\n            return Response(status=status.HTTP_404_NOT_FOUND)\n\n        except KeyError:\n\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Añade una nueva solicitud de amistad\n# de un usuario a su lista\n@api_view(['POST'])\n@parser_classes([JSONParser])\ndef AddRequest(request):\n    if request.method == \"POST\":\n\n        try:\n\n            hashfollower = encrypt(str.encode(request.data['NuevoSeguidor'])).hex()\n            hashususer = encrypt(str.encode(request.data['Usuario'])).hex()\n            seguidor = Usuario.objects.get(NombreUsuario=hashfollower)\n            Usuario.objects.get(NombreUsuario=hashususer).SolicitudAmistad.add(seguidor)\n            return Response(status=status.HTTP_200_OK)\n\n        except Usuario.DoesNotExist:\n\n            return Response(status=status.HTTP_404_NOT_FOUND)\n\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Devuelve la foto de perfil del usuario\n@api_view(['GET'])\n@parser_classes([JSONParser])\ndef GetProfilePhoto(request):\n    if request.method == \"GET\":\n        try:\n\n            data = {'FotoDePerfil': ''}\n            hashname = encrypt(str.encode(request.query_params['Usuario'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            data['FotoDePerfil'] = user.getFotoDePerfil(request.META['HTTP_HOST'])\n            print(data['FotoDePerfil'])\n            return JsonResponse(data, safe=False, status=status.HTTP_200_OK)\n\n        except Usuario.DoesNotExist:\n\n            return Response(status=status.HTTP_404_NOT_FOUND)\n\n        except KeyError:\n\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Devuelve la ultimacancion escuchada\n# por el usuario\n@api_view(['GET'])\ndef GetLastSong(request):\n    if request.method == \"GET\":\n\n        listOfArtists = []\n        listOfGenders = []\n        listOfAlbuns = []\n        listOfImages = []\n        songData = {'Artistas': '', 'url': '', 'Albumes': '', 'ImagenesAlbums': '', 'Generos': '', 'EsFavorita' : ''}\n        data = {}\n        # Por el momento siempre es la misma\n        hashname = encrypt(str.encode(request.query_params['Usuario'])).hex()\n        audio = AudioEscuchado.objects.filter(Usuario__NombreUsuario=hashname).order_by('TimeStamp').reverse().first()\n        user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n        if audio is not None:\n            song = Cancion.objects.get(AudioRegistrado=audio.Audio)\n        else:\n            song = Cancion.objects.all()[0]\n\n        artistsOfSong = song.Artistas.all()\n        for index2 in range(artistsOfSong.count()):\n            listOfArtists += [artistsOfSong[index2].Nombre]\n        albunsOfSong = song.Albunes.all()\n        for index3 in range(albunsOfSong.count()):\n            listOfAlbuns += [albunsOfSong[index3].NombreAlbum]\n            listOfImages += [albunsOfSong[index3].getFotoDelAlbum(request.META['HTTP_HOST'])]\n\n        gendersOfSong = song.Generos.all()\n        for index4 in range(gendersOfSong.count()):\n            listOfGenders += [gendersOfSong[index4].Nombre]\n\n        songData['Artistas'] = listOfArtists\n        songData['url'] = song.getURL(request.META['HTTP_HOST'])\n        songData['Albumes'] = listOfAlbuns\n        songData['ImagenesAlbums'] = listOfImages\n        songData['Generos'] = listOfGenders\n        songData['EsFavorita'] = user in song.UsuariosComoFavorita.all()\n        data[song.AudioRegistrado.Titulo] = songData\n        return JsonResponse(data, safe=False, status=status.HTTP_200_OK)\n\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Devulve los seguidores\n# de un usuario\n@api_view(['GET'])\ndef GetFollowers(request):\n    if request.method == \"GET\":\n\n        try:\n            data = {}\n            listOfPhotos = []\n            hashname = encrypt(str.encode(request.query_params['Usuario'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            followers = user.getFollowers()\n            for index in range(followers.count()):\n                listOfPhotos += [dict.fromkeys({'FotoDePerfil'})]\n                listOfPhotos[index]['FotoDePerfil'] = followers[index].getFotoDePerfil(request.META['HTTP_HOST'])\n                decodename = decrypt(binascii.unhexlify(followers[index].NombreUsuario)).decode('ascii')\n                data[decodename] = listOfPhotos[index]\n            return JsonResponse(data, safe=False, status=status.HTTP_200_OK)\n        except Usuario.DoesNotExist:\n            return Response(status=status.HTTP_404_NOT_FOUND)\n        except KeyError:\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Devuelve los usarios\n# a los que sigue un usuario\n@api_view(['GET'])\ndef GetFollowing(request):\n    if request.method == \"GET\":\n\n        try:\n            data = {}\n            listOfPhotos = []\n\n            hashname = encrypt(str.encode(request.query_params['Usuario'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            following = user.getFollowing()\n            for index in range(following.count()):\n                listOfPhotos += [dict.fromkeys({'FotoDePerfil'})]\n                listOfPhotos[index]['FotoDePerfil'] = following[index].getFotoDePerfil(request.META['HTTP_HOST'])\n                decodename = decrypt(binascii.unhexlify(following[index].NombreUsuario)).decode('ascii')\n                data[decodename] = listOfPhotos[index]\n            return JsonResponse(data, safe=False, status=status.HTTP_200_OK)\n        except Usuario.DoesNotExist:\n            return Response(status=status.HTTP_404_NOT_FOUND)\n        except KeyError:\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Añade una cancion a favoritos\n# de un usuario\n@api_view(['POST'])\n@parser_classes([JSONParser])\ndef AddSongToFavorites(request):\n    if request.method == \"POST\":\n\n        try:\n            hashname = encrypt(str.encode(request.data['Usuario'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            Cancion.objects.get(AudioRegistrado__Titulo=request.data['Titulo']).UsuariosComoFavorita.add(user)\n            return Response(status=status.HTTP_200_OK)\n\n        except Usuario.DoesNotExist:\n            return Response(status=status.HTTP_404_NOT_FOUND)\n        except Audio.DoesNotExist:\n            return Response(status=status.HTTP_404_NOT_FOUND)\n        except KeyError:\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Elimina una cancion como\n# favorita de un usuario\n@api_view(['POST'])\n@parser_classes([JSONParser])\ndef RemoveSongFromFavorites(request):\n    if request.method == \"POST\":\n        try:\n\n            hashname = encrypt(str.encode(request.data['Usuario'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            song = Cancion.objects.get(AudioRegistrado__Titulo=request.data['Titulo'])\n            song.UsuariosComoFavorita.remove(user)\n            return Response(status=status.HTTP_200_OK)\n\n        except Usuario.DoesNotExist:\n\n            return Response(status=status.HTTP_404_NOT_FOUND)\n\n        except Cancion.DoesNotExist:\n\n            return Response(status=status.HTTP_404_NOT_FOUND)\n\n        except KeyError:\n\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Marca una canción como escuchada\n# para un determinado usuario\n@api_view(['POST'])\n@parser_classes([JSONParser])\ndef AddSongToListened(request):\n    if request.method == \"POST\":\n\n        try:\n\n            hashname = encrypt(str.encode(request.data['Usuario'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            audio = Audio.objects.get(Titulo=request.data['Titulo'])\n            AudioEscuchado(Usuario=user, Audio=audio, TimeStamp=datetime.datetime.strptime(request.data['Timestamp'], '%Y/%m/%d %H:%M:%S')).save()\n            return Response(status=status.HTTP_200_OK)\n        except Usuario.DoesNotExist:\n\n            return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n        except Audio.DoesNotExist:\n\n            return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n        except KeyError:\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Dado un usuario\n# retorna un conjunto de\n# usuario y su foto\n@api_view(['GET'])\ndef SearchUser(request):\n    if request.method == \"GET\":\n        try:\n            data = {}\n            allUsers = Usuario.objects.all()\n            keyWord = re.compile(request.query_params['KeyWord'], re.IGNORECASE)\n            for index in range(allUsers.count()):\n\n                decodename = decrypt(binascii.unhexlify(allUsers[index].NombreUsuario)).decode('ascii')\n                if re.search(keyWord, decodename):\n                    #listOfUsers += [decodename]\n                    hashname = encrypt(str.encode(decodename)).hex()\n                    data[decodename]=Usuario.objects.get(NombreUsuario=hashname).getFotoDePerfil(request.META['HTTP_HOST'])\n            #data['Usuarios'] = listOfUsers\n            return JsonResponse(data, safe=False, status=status.HTTP_200_OK)\n        except KeyError:\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Dado un usuario y una palabra clave (que representa a otro usuario),\n# devuelve las relaciones sociales del primer usuario con el segundo (y su foto)\n@api_view(['GET'])\ndef SearchUserSocial(request):\n    if request.method == \"GET\":\n        try:\n            data = {}\n            hashname = encrypt(str.encode(request.query_params['NombreUsuario'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n\n            hashname2 = encrypt(str.encode(request.query_params['NombreOtroUsuario'])).hex()\n            user2 = Usuario.objects.get(Q(NombreUsuario=hashname2) | Q(Correo=hashname2))\n\n            data['Foto']= user2.getFotoDePerfil(request.META['HTTP_HOST'])\n            data['Seguidor'] = user in user2.Seguidos.all()\n            data['Seguido'] = user2 in user.Seguidos.all()\n            data['EnviadaSolicitud'] = user2 in user.SolicitudAmistad.all()\n            data['RecibidaSolicitud'] = user in user2.SolicitudAmistad.all()\n\n            #data['Usuarios'] = listOfUsers\n            return JsonResponse(data, safe=False, status=status.HTTP_200_OK)\n        except KeyError:\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Devulve las canciones\n# favoritas de un usuario\n\n# HAY UN BUG, revisar\n@api_view(['GET'])\ndef GetFavoriteSongs(request):\n    if request.method == \"GET\":\n\n        listOfSongs = []\n        data = {}\n        try:\n\n            hashname = encrypt(str.encode(request.query_params['NombreUsuario'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            favoritesongs = user.Favoritas.all()\n\n            for index in (range(favoritesongs.count())):\n                listOfAlbuns = []\n                listOfImages = []\n                listOfArtists = []\n                listOfGenders = []\n\n                artistsOfSong = favoritesongs[index].Artistas.all()\n                for index2 in range(artistsOfSong.count()):\n                    listOfArtists += [artistsOfSong[index2].Nombre]\n\n                albunsOfSong = favoritesongs[index].Albunes.all()\n                for index3 in range(albunsOfSong.count()):\n                    listOfAlbuns += [albunsOfSong[index3].NombreAlbum]\n                    listOfImages += [albunsOfSong[index3].getFotoDelAlbum(request.META['HTTP_HOST'])]\n\n                gendersOfSong = favoritesongs[index].Generos.all()\n                for index4 in range(gendersOfSong.count()):\n                    listOfGenders += [gendersOfSong[index4].Nombre]\n\n                listOfSongs += [dict.fromkeys({'Artistas', 'url', 'Albumes', 'ImagenesAlbums', 'Generos'})]\n                listOfSongs[index]['Artistas'] = listOfArtists\n                listOfSongs[index]['url'] = favoritesongs[index].getURL(request.META['HTTP_HOST'])\n                listOfSongs[index]['Albumes'] = listOfAlbuns\n                listOfSongs[index]['ImagenesAlbums'] = listOfImages\n                listOfSongs[index]['Generos'] = listOfGenders\n\n                data[favoritesongs[index].AudioRegistrado.Titulo] = listOfSongs[index]\n            return JsonResponse(data, safe=False, status=status.HTTP_200_OK)\n\n        except Usuario.DoesNotExist:\n\n            return Response(status=status.HTTP_404_NOT_FOUND)\n\n        except KeyError:\n\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Crea una nueva playList\n# Para un determinado usuario\n@api_view(['POST'])\n@parser_classes([JSONParser])\ndef CreatePlayList(request):\n    if request.method == \"POST\":\n        try:\n            hashname = encrypt(str.encode(request.data['NombreUsuario'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            nombre = request.data['NombrePlayList']\n            privado = request.data['EsPrivado']\n            PlayList.objects.create(Nombre=nombre, Privado=privado, UsuarioNombre=user)\n            return Response(status=status.HTTP_200_OK)\n        except Usuario.DoesNotExist:\n\n            return Response(status=status.HTTP_404_NOT_FOUND)\n\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Añade una cancion a una\n# play list de un determinado\n# usuario\n@api_view(['POST'])\n@parser_classes([JSONParser])\ndef AddSongToPlayList(request):\n    if request.method == \"POST\":\n        try:\n            hashname = encrypt(str.encode(request.data['NombreUsuario'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            song = Cancion.objects.get(AudioRegistrado__Titulo=request.data['NombreCancion'])\n            pl = PlayList.objects.get(UsuarioNombre=user, Nombre=request.data['NombrePlayList'])\n            pl.Canciones.add(song)\n            pl.save()\n            print(song)\n            return Response(status=status.HTTP_200_OK)\n\n        except Cancion.DoesNotExist:\n            return Response(status=status.HTTP_404_NOT_FOUND)\n        except KeyError:\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Devuelve todas las play list y su conjunto de imágenes\n#  de un determinado usuario\n@api_view(['GET'])\n# @parser_classes([JSONParser])\ndef GetUserPlaylists(request):\n    #print(request.query_params['NombreUsuario'])\n    data = {}\n    if request.method == \"GET\":\n        try:\n            hashname = encrypt(str.encode(request.query_params['NombreUsuario'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n\n            for p in PlayList.objects.filter(UsuarioNombre=user):\n                playlist = {'Fotos': [], 'Privado': 'True'}\n                nombre = p.Nombre\n                esPrivado = p.Privado\n                playlist['Privado'] = esPrivado\n\n                fotos = []\n                i = 0\n                for c in p.Canciones.order_by('id')[:4]:\n                    album = (Album.objects.filter(Canciones=c)).first()\n                    fotos.append(album.getFotoDelAlbum(request.META['HTTP_HOST']))\n                    i = i + 1\n                if i > 0:\n                    playlist['Fotos'] = fotos\n                else:\n                    playlist['Fotos'] = ''\n                data[nombre] = playlist\n            return JsonResponse(data, safe=False, status=status.HTTP_200_OK)\n\n        except Usuario.DoesNotExist:\n            return Response(status=status.HTTP_404_NOT_FOUND)\n    else:\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Devuelve todas las play list y su conjunto de imágenes\n#  de un determinado usuario\n@api_view(['GET'])\n# @parser_classes([JSONParser])\ndef GetUserPublicPlaylists(request):\n    #print(request.query_params['NombreUsuario'])\n    data = {}\n    if request.method == \"GET\":\n        try:\n            hashname = encrypt(str.encode(request.query_params['NombreUsuario'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n\n            for p in PlayList.objects.filter(UsuarioNombre=user, Privado=False):\n                playlist = {'Fotos': [], 'Privado': 'True'}\n                nombre = p.Nombre\n                esPrivado = p.Privado\n                playlist['Privado'] = esPrivado\n\n                fotos = []\n                i = 0\n                for c in p.Canciones.order_by('id')[:4]:\n                    album = (Album.objects.filter(Canciones=c)).first()\n                    fotos.append(album.getFotoDelAlbum(request.META['HTTP_HOST']))\n                    i = i + 1\n                if i > 0:\n                    playlist['Fotos'] = fotos\n                else:\n                    playlist['Fotos'] = ''\n                data[nombre] = playlist\n            return JsonResponse(data, safe=False, status=status.HTTP_200_OK)\n\n        except Usuario.DoesNotExist:\n            return Response(status=status.HTTP_404_NOT_FOUND)\n    else:\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Permite la creacion de carpetas\n# dado su nombre, su usuario y un conjunto de playlists\n@api_view(['POST'])\ndef CreateFolder(request):\n    if request.method == \"POST\":\n        try:\n            nombreCarpeta = request.data['NombreCarpeta']\n            hashname = encrypt(str.encode(request.data['NombreUsuario'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            playlist = PlayList.objects.get(Nombre=(request.data['NombrePlayList']), UsuarioNombre=user)\n\n            carpeta = Carpeta(Nombre=nombreCarpeta)\n            carpeta.save()\n            carpeta.PlayList.add(playlist)\n\n            return Response(status=status.HTTP_200_OK)\n        except (Usuario.DoesNotExist, PlayList.DoesNotExist):\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Permite modificar los campos\n# de una playList\n@api_view(['POST'])\ndef updatePlaylist(request):\n    if request.method == \"POST\":\n        try:\n            hashname = encrypt(str.encode(request.data['NombreUsuario'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            playlist = PlayList.objects.get(Nombre=(request.data['NombrePlayList']), UsuarioNombre=user)\n\n            playlist.Nombre = request.data['NuevoNombre']\n            playlist.Privado = request.data['NuevoPrivado']\n            playlist.save()\n            return Response(status=status.HTTP_200_OK)\n        except (Usuario.DoesNotExist, PlayList.DoesNotExist, KeyError):\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Devuelve todas las canciones de una playlist\n@api_view(['GET'])\n@parser_classes([JSONParser])\ndef GetPlaylistSongs(request):\n    if request.method == \"GET\":\n\n        try:\n            listaOfArtists = []\n            listOfAlbuns = []\n            listOfImages = []\n            listOfSongs = []\n\n            data = {}\n            hashname = encrypt(str.encode(request.query_params['NombreUsuario'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            songs = PlayList.objects.get(Nombre=request.query_params['NombrePlayList'],\n                                         UsuarioNombre=user).Canciones.all()\n            for index in range(songs.count()):\n\n                artistsOfSong = songs[index].Artistas.all()\n                for index2 in range(artistsOfSong.count()):\n                    listaOfArtists += [artistsOfSong[index2].Nombre]\n                    print(artistsOfSong[index2].Nombre)\n                    print(listaOfArtists)\n                albunsOfSong = songs[index].Albunes.all()\n                for index3 in range(albunsOfSong.count()):\n                    listOfAlbuns += [albunsOfSong[index3].NombreAlbum]\n                    listOfImages += [albunsOfSong[index3].getFotoDelAlbum(request.META['HTTP_HOST'])]\n\n                listOfSongs += [dict.fromkeys({'Artistas', 'url', 'Albumes', 'ImagenesAlbums', 'EsFavorita'})]\n                listOfSongs[index]['Artistas'] = listaOfArtists\n                listOfSongs[index]['url'] = songs[index].getURL(request.META['HTTP_HOST'])\n                listOfSongs[index]['Albumes'] = listOfAlbuns\n                listOfSongs[index]['ImagenesAlbums'] = listOfImages\n                listOfSongs[index]['EsFavorita'] = songs[index].UsuariosComoFavorita.all().filter(\n                    NombreUsuario=hashname).exists()\n                data[songs[index].AudioRegistrado.Titulo] = listOfSongs[index]\n                listaOfArtists = []\n                listOfAlbuns = []\n                listOfImages = []\n\n            return JsonResponse(data, safe=False, status=status.HTTP_200_OK)\n\n        except PlayList.DoesNotExist:\n            return Response(status=status.HTTP_404_NOT_FOUND)\n\n        except KeyError:\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n\n    else:\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Devuelve todas las canciones\n# de un determinado artista\n@api_view(['GET'])\n@parser_classes([JSONParser])\ndef GetSongByArtist(request):\n    if request.method == \"GET\":\n        try:\n            listaOfArtists = []\n            listOfAlbuns = []\n            listOfImages = []\n            listOfSongs = []\n            listOfGeneros = []\n            data = {}\n            songs = Artista.objects.get(Nombre=request.query_params['NombreArtista']).Canciones.all()\n            hashname = encrypt(str.encode(request.query_params['NombreUsuario'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            for index in range(songs.count()):\n\n                artistsOfSong = songs[index].Artistas.all()\n                for index2 in range(artistsOfSong.count()):\n                    listaOfArtists += [artistsOfSong[index2].Nombre]\n                    print(artistsOfSong[index2].Nombre)\n                    print(listaOfArtists)\n                albunsOfSong = songs[index].Albunes.all()\n                for index3 in range(albunsOfSong.count()):\n                    listOfAlbuns += [albunsOfSong[index3].NombreAlbum]\n                    listOfImages += [albunsOfSong[index3].getFotoDelAlbum(request.META['HTTP_HOST'])]\n                genreOfSong = Genero.objects.filter(Canciones=songs[index])\n                for index4 in genreOfSong:\n                    listOfGeneros.append(index4.Nombre)\n\n                listOfSongs += [dict.fromkeys({'Artistas', 'url', 'Albumes', 'ImagenesAlbum', 'EsFavorita'})]\n                listOfSongs[index]['Artistas'] = listaOfArtists\n                listOfSongs[index]['url'] = songs[index].getURL(request.META['HTTP_HOST'])\n                listOfSongs[index]['Albumes'] = listOfAlbuns\n                listOfSongs[index]['Generos'] = listOfGeneros\n                listOfSongs[index]['ImagenesAlbum'] = listOfImages\n                listOfSongs[index]['EsFavorita'] = songs[index].UsuariosComoFavorita.all().filter(\n                    NombreUsuario=hashname).exists()\n                data[songs[index].AudioRegistrado.Titulo] = listOfSongs[index]\n                listaOfArtists = []\n                listOfAlbuns = []\n                listOfImages = []\n                listOfGeneros = []\n\n            return JsonResponse(data, safe=False, status=status.HTTP_200_OK)\n\n        except Genero.DoesNotExist:\n\n            return Response(status=status.HTTP_404_NOT_FOUND)\n\n        except KeyError:\n\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Devuelve todas las carpetas\n# de un determinado usuario\n@api_view(['GET'])\n@parser_classes([JSONParser])\ndef GetUserFolders(request):\n    data = {}\n    fotos = []\n    playlist = []\n    indexPlayList = 0\n    last = 0\n    if request.method == \"GET\":\n        try:\n            hashname = encrypt(str.encode(request.query_params['NombreUsuario'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            playlists = []\n            p = PlayList.objects.filter(UsuarioNombre=user)\n\n            for c in Carpeta.objects.filter(PlayList__in=p).distinct('Nombre'):\n\n                for c_pl in c.PlayList.all():\n\n                    playlist += [dict.fromkeys({'Fotos', 'Privado'})]\n                    playlist[indexPlayList]['Privado'] = c_pl.Privado\n\n                    i = 0\n                    fts = []\n                    for can in c_pl.Canciones.order_by('id')[:4]:\n                        album = Album.objects.get(Canciones=can)\n                        fts.append(album.getFotoDelAlbum(request.META['HTTP_HOST']))\n                        i = i + 1\n\n                    if i > 0:\n                        fotos.append(fts)\n                        playlist[indexPlayList]['Fotos'] = fotos[indexPlayList]\n\n                    else:\n                        fotos.append('')\n                        playlist[indexPlayList]['Fotos'] = fotos[indexPlayList]\n\n                    playlists += [dict.fromkeys({c_pl.Nombre})]\n                    playlists[indexPlayList][c_pl.Nombre] = playlist[indexPlayList]\n\n                    indexPlayList = indexPlayList + 1\n                # nombres.append(c.Nombre)\n                data[c.Nombre] = playlists[last:indexPlayList]\n                last = indexPlayList\n                # data[\"Carpetas\"]=nombres\n\n            return JsonResponse(data, safe=False, status=status.HTTP_200_OK)\n\n        except User.DoesNotExist:\n            return Response(status=status.HTTP_404_NOT_FOUND)\n\n        except (PlayList.DoesNotExist, Carpeta.DoesNotExist):\n            return Response(status=status.HTTP_404_NOT_FOUND)\n\n        except KeyError:\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n\n    else:\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Permite modificar los campos\n# de una playList\n@api_view(['POST'])\ndef removePlaylist(request):\n    if request.method == \"POST\":\n        try:\n            hashname = encrypt(str.encode(request.data['NombreUsuario'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            playlist = PlayList.objects.get(Nombre=(request.data['NombrePlayList']), UsuarioNombre=user)\n            playlist.delete()\n            return Response(status=status.HTTP_200_OK)\n        except (Usuario.DoesNotExist, PlayList.DoesNotExist):\n            return Response(status=status.HTTP_404_NOT_FOUND)\n        except KeyError:\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Permite modificar los campos\n# de una playList\n@api_view(['POST'])\ndef removePlaylistSong(request):\n    if request.method == \"POST\":\n        try:\n            hashname = encrypt(str.encode(request.data['NombreUsuario'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            playlist = PlayList.objects.get(Nombre=(request.data['NombrePlayList']), UsuarioNombre=user)\n            cancion = Cancion.objects.get(AudioRegistrado__Titulo=request.data['NombreCancion'])\n            print(cancion)\n            playlist.Canciones.remove(cancion)\n            playlist.save()\n            return Response(status=status.HTTP_200_OK)\n        except (Usuario.DoesNotExist, PlayList.DoesNotExist):\n            return Response(status=status.HTTP_404_NOT_FOUND)\n        except KeyError:\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Permite eliminar una carpta\n@api_view(['POST'])\ndef removeFolder(request):\n    if request.method == \"POST\":\n        try:\n            hashname = encrypt(str.encode(request.data['NombreUsuario'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            p = PlayList.objects.filter(UsuarioNombre=user)\n            c = Carpeta.objects.filter(PlayList__in=p, Nombre=request.data['NombreCarpeta']).distinct('Nombre')\n            c = c[0]\n            c.delete()\n            return Response(status=status.HTTP_200_OK)\n        except (Usuario.DoesNotExist, PlayList.DoesNotExist):\n            return Response(status=status.HTTP_404_NOT_FOUND)\n        except KeyError:\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Permite modificar los campos de una carpta\n@api_view(['POST'])\ndef updateFolder(request):\n    if request.method == \"POST\":\n        try:\n            hashname = encrypt(str.encode(request.data['NombreUsuario'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            p = PlayList.objects.filter(UsuarioNombre=user)\n            c = Carpeta.objects.filter(PlayList__in=p, Nombre=request.data['NombreCarpeta']).distinct('Nombre')\n            c = c[0]\n\n            c.Nombre = request.data['NuevoNombre']\n            c.save()\n            return Response(status=status.HTTP_200_OK)\n        except (Usuario.DoesNotExist, PlayList.DoesNotExist):\n            return Response(status=status.HTTP_404_NOT_FOUND)\n        except KeyError:\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Permite añadir playLists a una carpeta\n@api_view(['POST'])\ndef addPlayListToFolder(request):\n    if request.method == \"POST\":\n        try:\n            hashname = encrypt(str.encode(request.data['NombreUsuario'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            all_p = PlayList.objects.filter(UsuarioNombre=user)\n\n            c = Carpeta.objects.filter(PlayList__in=all_p, Nombre=request.data['NombreCarpeta']).distinct('Nombre')\n            c = c[0]\n\n            p = PlayList.objects.get(UsuarioNombre=user, Nombre=request.data['NombrePlayList'])\n            c.PlayList.add(p)\n            c.save()\n            return Response(status=status.HTTP_200_OK)\n        except (Usuario.DoesNotExist, PlayList.DoesNotExist):\n            return Response(status=status.HTTP_404_NOT_FOUND)\n        except KeyError:\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Permite eliminar playLists de una carpeta\n@api_view(['POST'])\ndef removePlayListFromFolder(request):\n    if request.method == \"POST\":\n        try:\n            hashname = encrypt(str.encode(request.data['NombreUsuario'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            all_p = PlayList.objects.filter(UsuarioNombre=user)\n            c = Carpeta.objects.filter(PlayList__in=all_p, Nombre=request.data['NombreCarpeta']).distinct('Nombre')\n            c = c[0]\n\n            p = PlayList.objects.get(UsuarioNombre=user, Nombre=request.data['NombrePlayList'])\n            c.PlayList.remove(p)\n            c.save()\n            return Response(status=status.HTTP_200_OK)\n        except (Usuario.DoesNotExist, PlayList.DoesNotExist):\n            return Response(status=status.HTTP_404_NOT_FOUND)\n        except KeyError:\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Añade una solicitud de amistad\n# a la lista de solicitudes de un\n# usuario\n@api_view(['POST'])\ndef AddUserFollowResquest(request):\n    if request.method == \"POST\":\n        try:\n            hashname = encrypt(str.encode(request.data['NombreUsuario'])).hex()\n            hashnamefollower = encrypt(str.encode(request.data['Seguido'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            followed = Usuario.objects.get(Q(NombreUsuario=hashnamefollower) | Q(Correo=hashnamefollower))\n            user.addRequest(followed)\n            return Response(status=status.HTTP_200_OK)\n\n        except Usuario.DoesNotExist:\n            return Response(status=status.HTTP_404_NOT_FOUND)\n        except KeyError:\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# La funcion devuelve los ultimos  20\n# audios escuchados por un usuario\n@api_view(['GET'])\ndef GetLastSongs(request):\n    if request.method == \"GET\":\n\n        try:\n            listOfAudios = []\n            listOfArtists = []\n            listOfGenders = []\n            listOfAlbuns = []\n            listOfImages = []\n            data = {}\n            index = 0\n            # Por el momento siempre es la misma\n            hashname = encrypt(str.encode(request.query_params['Usuario'])).hex()\n            audios = AudioEscuchado.objects.filter(Usuario__NombreUsuario=hashname).order_by('TimeStamp').reverse()[:20]\n            user = Usuario.objects.filter(NombreUsuario=hashname)\n            for audio in audios:\n\n                if Cancion.objects.filter(AudioRegistrado=audio.Audio).exists():\n\n                    song = Cancion.objects.get(AudioRegistrado=audio.Audio)\n                    artistsOfSong = song.Artistas.all()\n                    for index2 in range(artistsOfSong.count()):\n                        listOfArtists += [artistsOfSong[index2].Nombre]\n                    albunsOfSong = song.Albunes.all()\n                    for index3 in range(albunsOfSong.count()):\n                        listOfAlbuns += [albunsOfSong[index3].NombreAlbum]\n                        listOfImages += [albunsOfSong[index3].getFotoDelAlbum(request.META['HTTP_HOST'])]\n\n                    gendersOfSong = song.Generos.all()\n                    for index4 in range(gendersOfSong.count()):\n                        listOfGenders += [gendersOfSong[index4].Nombre]\n\n                    listOfAudios += [\n                        dict.fromkeys({'Tipo', 'Titulo', 'Artistas', 'url', 'Albumes', 'ImagenesAlbums', 'Generos','EsFavorita'})]\n                    listOfAudios[index]['Tipo'] = 'Cancion'\n                    listOfAudios[index]['Artistas'] = listOfArtists\n                    listOfAudios[index]['url'] = song.getURL(request.META['HTTP_HOST'])\n                    listOfAudios[index]['Albumes'] = listOfAlbuns\n                    listOfAudios[index]['ImagenesAlbums'] = listOfImages\n                    listOfAudios[index]['Generos'] = listOfGenders\n                    listOfAudios[index]['Titulo'] = song.AudioRegistrado.Titulo\n                    listOfAudios[index]['EsFavorita'] = user in song.UsuariosComoFavorita.all()\n                    data[index] = listOfAudios[index]\n                    listOfArtists = []\n                    listOfGenders = []\n                    listOfAlbuns = []\n                    listOfImages = []\n\n                else:\n\n                    chapter = Capitulo.objects.get(AudioRegistrado=audio.Audio)\n                    podcast = chapter.Capitulos.all()[0]\n                    listOfAudios[index] += [dict.fromkeys({'Tipo', 'Titulo', 'Imagen', 'Interlocutor'})]\n                    listOfAudios[index]['Tipo'] = 'Podcast'\n                    listOfAudios[index]['Imagen'] = podcast.getFotoDelPodcast(request.META['HTTP_HOST'])\n                    listOfAudios[index]['Interlocutor'] = podcast.Participan.all()[0].Nombre\n                    listOfAudios[index]['Titulo'] = listOfAudios[index]\n                    data[index] = listOfAudios[index]\n\n                index = index + 1\n            return JsonResponse(data, safe=False, status=status.HTTP_200_OK)\n        except Usuario.DoesNotExist:\n            return Response(status=status.HTTP_404_NOT_FOUND)\n        except KeyError:\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# La funcion devuelve los ultimos  20\n# audios escuchados por un usuario\n@api_view(['GET'])\ndef GetAllArtists(request):\n    if request.method == \"GET\":\n        data = {}\n        try:\n            for a in Artista.objects.all():\n                data[a.Nombre] = a.getFoto(request.META['HTTP_HOST'])\n            return JsonResponse(data, safe=False, status=status.HTTP_200_OK)\n        except Artista.DoesNotExist:\n            return Response(status=status.HTTP_404_NOT_FOUND)\n        except KeyError:\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# La funcion devuelve los ultimos  20\n# audios escuchados por un usuario\n@api_view(['GET'])\ndef GetAllGenders(request):\n    if request.method == \"GET\":\n        data = {}\n        try:\n            for a in Genero.objects.all():\n                data[a.Nombre] = a.getFoto(request.META['HTTP_HOST'])\n            return JsonResponse(data, safe=False, status=status.HTTP_200_OK)\n        except Genero.DoesNotExist:\n            return Response(status=status.HTTP_404_NOT_FOUND)\n        except KeyError:\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Devuelve las solicitudes de amistad hacia un usuario\n@api_view(['GET'])\ndef GetFollowRequests(request):\n    if request.method == \"GET\":\n\n        try:\n            data = {}\n            listOfPhotos = []\n\n            hashname = encrypt(str.encode(request.query_params['Usuario'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            requests = user.getRequests()\n            for index in range(requests.count()):\n                listOfPhotos += [dict.fromkeys({'FotoDePerfil'})]\n                listOfPhotos[index]['FotoDePerfil'] = requests[index].getFotoDePerfil(request.META['HTTP_HOST'])\n                decodename = decrypt(binascii.unhexlify(requests[index].NombreUsuario)).decode('ascii')\n                data[decodename] = listOfPhotos[index]\n            return JsonResponse(data, safe=False, status=status.HTTP_200_OK)\n        except Usuario.DoesNotExist:\n            return Response(status=status.HTTP_404_NOT_FOUND)\n        except KeyError:\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Devuelve el tipo de permiso\n# de un usuario\n@api_view(['GET'])\n@parser_classes([JSONParser])\ndef GetPermissions(request):\n    if request.method == \"GET\":\n\n        try:\n            data = {}\n\n            hashname = encrypt(str.encode(request.query_params['Usuario'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n\n            if NoPremium.objects.filter(UsuarioRegistrado=user).exists():\n                data['Permiso'] = 'No Premium'\n            elif Premium.objects.filter(UsuarioRegistrado=user).exists():\n                data['Permiso'] = 'Premium'\n            elif CreadorContenido.objects.filter(UsuarioRegistrado=user).exists():\n                data['Permiso'] = 'Creador de contenido'\n\n            return JsonResponse(data, safe=False, status=status.HTTP_200_OK)\n        except Usuario.DoesNotExist:\n            return Response(status=status.HTTP_404_NOT_FOUND)\n        except KeyError:\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# La funcion hace una recuperacion\n# informacion en la bases de datod\n# dada una cadena\n\n@api_view(['GET'])\n@parser_classes([JSONParser])\ndef Search(request):\n    if request.method == \"GET\":\n        try:\n            data = {'Canciones': '', 'PlayLists': '', 'Albumes': '', 'Podcasts': '', 'Artistas': ''}\n            listOfUsers = []\n            listaOfArtists = []\n            listOfAlbuns = []\n            listOfImages = []\n            listOfSongs = []\n            listOfGeneros = []\n            albumes = {}\n            songs = {}\n            playlists = {}\n            podcasts = {}\n\n            element = 0\n            allArtists = Artista.objects.filter(Nombre__contains=request.query_params['KeyWord'])[:5]\n            allSongs = Cancion.objects.filter(AudioRegistrado__Titulo__contains=request.query_params['KeyWord'])[:5]\n            allPlayLists = PlayList.objects.filter(Nombre__contains=request.query_params['KeyWord'])[:5]\n            allPodcasts = Podcast.objects.filter(Nombre__contains=request.query_params['KeyWord'])[:5]\n            allAlbumes = Album.objects.filter(NombreAlbum__contains=request.query_params['KeyWord'])[:5]\n\n            hashname = encrypt(str.encode(request.query_params['NombreUsuario'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            for index in range(allArtists.count()):\n\n                listOfUsers += [dict.fromkeys({'Nombre', 'Foto'})]\n                listOfUsers[element]['Nombre'] = allArtists[index].Nombre\n                listOfUsers[element]['Foto'] = allArtists[index].getFoto(request.META['HTTP_HOST'])\n                element += 1\n            element = 0\n            data['Artistas'] = listOfUsers\n\n            for index in range(allSongs.count()):\n\n                artistsOfSong = allSongs[index].Artistas.all()\n                for index2 in range(artistsOfSong.count()):\n                    listaOfArtists += [artistsOfSong[index2].Nombre]\n\n                albunsOfSong = allSongs[index].Albunes.all()\n                for index3 in range(albunsOfSong.count()):\n                    listOfAlbuns += [albunsOfSong[index3].NombreAlbum]\n                    listOfImages += [albunsOfSong[index3].getFotoDelAlbum(request.META['HTTP_HOST'])]\n                genreOfSong = Genero.objects.filter(Canciones=allSongs[index])\n                for index4 in genreOfSong:\n                    listOfGeneros.append(index4.Nombre)\n\n                listOfSongs += [dict.fromkeys({'Artistas', 'url', 'Albumes', 'ImagenesAlbum', 'EsFavorita'})]\n                listOfSongs[element]['Artistas'] = listaOfArtists\n                listOfSongs[element]['url'] = allSongs[index].getURL(request.META['HTTP_HOST'])\n                listOfSongs[element]['Albumes'] = listOfAlbuns\n                listOfSongs[element]['Generos'] = listOfGeneros\n                listOfSongs[element]['ImagenesAlbum'] = listOfImages\n                listOfSongs[element]['EsFavorita'] = user in allSongs[index].UsuariosComoFavorita.all()\n\n                songs[allSongs[index].AudioRegistrado.Titulo] = listOfSongs[element]\n                listaOfArtists = []\n                listOfAlbuns = []\n                listOfImages = []\n                listOfGeneros = []\n                element += 1\n\n            data['Canciones'] = songs\n\n            for index in range(allAlbumes.count()):\n\n               albumes[allAlbumes[index].NombreAlbum] = allAlbumes[index].getFotoDelAlbum(\n                                                                                request.META['HTTP_HOST'])\n\n            data['Albumes'] = albumes\n\n            for index in range(allPlayLists.count()):\n\n                playlist = {'Fotos': []}\n                nombre = allPlayLists[index].Nombre\n\n                fotos = []\n                i = 0\n\n                for c in allPlayLists[index].Canciones.order_by('id')[:4]:\n                    album = album = (Album.objects.filter(Canciones=c)).first()\n                    fotos.append(album.getFotoDelAlbum(request.META['HTTP_HOST']))\n                    i = i + 1\n                if i > 0:\n                    playlist['Fotos'] = fotos\n                else:\n                    playlist['Fotos'] = ''\n\n                playlists[nombre] = playlist\n\n            data['PlayLists'] = playlists\n\n            for index in range(allPodcasts.count()):\n\n                podcasts[allPodcasts[index].Nombre] = allPodcasts[index].getFotoDelPodcast(\n                                                                            request.META['HTTP_HOST'])\n            data['Podcasts'] = podcasts\n            return JsonResponse(data, safe=False, status=status.HTTP_200_OK)\n\n        except KeyError:\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n\n    else:\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Permite que un usuario deje de seguir a un usuario ya seguido\n@api_view(['POST'])\ndef Unfollow(request):\n    if request.method == \"POST\":\n        try:\n            hashname = encrypt(str.encode(request.data['NombreUsuario'])).hex()\n            hashfollower = encrypt(str.encode(request.data['Seguido'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            followed = Usuario.objects.get(Q(NombreUsuario=hashfollower) | Q(Correo=hashfollower))\n            user.unFollow(followed)\n            return Response(status=status.HTTP_200_OK)\n\n        except Usuario.DoesNotExist:\n            return Response(status=status.HTTP_404_NOT_FOUND)\n        except KeyError:\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n    else:\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Elimina una solicitud de seguir:\n# Eliminar una solicitud mandada por ti: NombreUsuario='NombreUsuario'  , Seguido= 'Seguido'\n@api_view(['POST'])\ndef RemoveUserFollowResquest(request):\n    if request.method == \"POST\":\n        try:\n            hashname = encrypt(str.encode(request.data['NombreUsuario'])).hex()\n            hashfollower = encrypt(str.encode(request.data['Seguido'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            followed = Usuario.objects.get(Q(NombreUsuario=hashfollower) | Q(Correo=hashfollower))\n            user.removeRequest(followed)\n            return Response(status=status.HTTP_200_OK)\n\n        except Usuario.DoesNotExist:\n            return Response(status=status.HTTP_404_NOT_FOUND)\n        except KeyError:\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n    else:\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Elimina una solicitud de seguir\n# Rechazar una solicitud que te han mandado:\n@api_view(['POST'])\ndef RejectFollowResquest(request):\n    if request.method == \"POST\":\n        try:\n            hashname = encrypt(str.encode(request.data['NombreUsuario'])).hex()\n            hashfollower = encrypt(str.encode(request.data['Seguidor'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            follower = Usuario.objects.get(Q(NombreUsuario=hashfollower) | Q(Correo=hashfollower))\n            follower.removeRequest(user)\n            return Response(status=status.HTTP_200_OK)\n\n        except Usuario.DoesNotExist:\n            return Response(status=status.HTTP_404_NOT_FOUND)\n        except KeyError:\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n    else:\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# El usuario 'NombreUsuario' elimina el seguidor 'Seguidor'\n# (Eliminar 'NombreUsuario' de la lista de seguidos de 'Seguidor' )\n@api_view(['POST'])\ndef RemoveFollower(request):\n    if request.method == \"POST\":\n        try:\n            hashname = encrypt(str.encode(request.data['NombreUsuario'])).hex()\n            hashfollower = encrypt(str.encode(request.data['Seguidor'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            follower = Usuario.objects.get(Q(NombreUsuario=hashfollower) | Q(Correo=hashfollower))\n            follower.removeFollower(user)\n            return Response(status=status.HTTP_200_OK)\n\n        except Usuario.DoesNotExist:\n            return Response(status=status.HTTP_404_NOT_FOUND)\n        except KeyError:\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n    else:\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Añade al a 'seguidor' en los seguidores de 'Usuario'\n#  Además, elimina la solicitud del usuario 'seguidor'\n\n@api_view(['POST'])\ndef Follow(request):\n    if request.method == \"POST\":\n        try:\n            hashname = encrypt(str.encode(request.data['NombreUsuario'])).hex()\n            hashfollower = encrypt(str.encode(request.data['Seguidor'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            follower = Usuario.objects.get(Q(NombreUsuario=hashfollower) | Q(Correo=hashfollower))\n            follower.follow(user)\n            follower.removeRequest(user)\n            return Response(status=status.HTTP_200_OK)\n\n        except Usuario.DoesNotExist:\n\n            return Response(status=status.HTTP_404_NOT_FOUND)\n\n        except KeyError:\n\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Devuelve todas las canciones\n# de un determinado album\n@api_view(['GET'])\n@parser_classes([JSONParser])\ndef GetSongByAlbum(request):\n    if request.method == \"GET\":\n\n        try:\n\n            listaOfArtists = []\n            listOfAlbuns = []\n            listOfGeneros = []\n            listOfImages = []\n            listOfSongs = []\n            data = {}\n            songs = Album.objects.get(NombreAlbum=request.query_params['NombreAlbum']).Canciones.all()\n            hashname = encrypt(str.encode(request.query_params['NombreUsuario'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            for index in range(songs.count()):\n\n                artistsOfSong = songs[index].Artistas.all()\n                for index2 in range(artistsOfSong.count()):\n                    listaOfArtists += [artistsOfSong[index2].Nombre]\n                albunsOfSong = songs[index].Albunes.all()\n                for index3 in range(albunsOfSong.count()):\n                    listOfAlbuns += [albunsOfSong[index3].NombreAlbum]\n                    listOfImages += [albunsOfSong[index3].getFotoDelAlbum(request.META['HTTP_HOST'])]\n                genreOfSong = Genero.objects.filter(Canciones=songs[index])\n                for index4 in genreOfSong:\n                    listOfGeneros.append(index4.Nombre)\n\n                listOfSongs += [dict.fromkeys({'Artistas', 'url', 'Albumes', 'ImagenesAlbum', 'EsFavorita'})]\n                listOfSongs[index]['Artistas'] = listaOfArtists\n                listOfSongs[index]['url'] = songs[index].getURL(request.META['HTTP_HOST'])\n                listOfSongs[index]['Albumes'] = listOfAlbuns\n                listOfSongs[index]['ImagenesAlbum'] = listOfImages\n                listOfSongs[index]['Generos'] = listOfGeneros\n                listOfSongs[index]['EsFavorita'] = songs[index].UsuariosComoFavorita.all().filter(\n                    NombreUsuario=hashname).exists()\n                data[songs[index].AudioRegistrado.Titulo] = listOfSongs[index]\n                listaOfArtists = []\n                listOfAlbuns = []\n                listOfImages = []\n                listOfGeneros = []\n\n            return JsonResponse(data, safe=False, status=status.HTTP_200_OK)\n\n        except Album.DoesNotExist:\n\n            return Response(status=status.HTTP_404_NOT_FOUND)\n\n        except KeyError:\n\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Devuelve los albumes de un artista, y su foto\n@api_view(['GET'])\n# @parser_classes([JSONParser])\ndef GetArtistAlbums(request):\n    data = {}\n    if request.method == \"GET\":\n        try:\n            artist = Artista.objects.get(Nombre=request.query_params['NombreArtista'])\n\n            # for a in Album.objects.filter(Canciones__in=Artista.Canciones.objects.all()):\n            for a in Album.objects.filter(Canciones__in=artist.Canciones.all()):\n                data[a.NombreAlbum] = a.getFotoDelAlbum(request.META['HTTP_HOST'])\n\n            return JsonResponse(data, safe=False, status=status.HTTP_200_OK)\n\n        except Artista.DoesNotExist:\n            return Response(status=status.HTTP_404_NOT_FOUND)\n    else:\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n# Devuelve 15 random albums y su conjunto de imágenes\n#  de un determinado usuario\n@api_view(['GET'])\n# @parser_classes([JSONParser])\ndef GetRandomAlbums(request):\n    data = {}\n    if request.method == \"GET\":\n        try:\n            for a in Album.objects.filter()[:15]:\n                data[a.NombreAlbum] = a.getFotoDelAlbum(request.META['HTTP_HOST'])\n\n            return JsonResponse(data, safe=False, status=status.HTTP_200_OK)\n\n        except Album.DoesNotExist:\n            return Response(status=status.HTTP_404_NOT_FOUND)\n    else:\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n@api_view(['POST'])\ndef AskForPremium(request):\n    if request.method == \"POST\":\n        try:\n            hashname = encrypt(str.encode(request.data['NombreUsuario'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            nopremium = NoPremium.objects.get(UsuarioRegistrado=user)\n            nopremium.pidePremium = True\n            nopremium.save()\n            return Response(status=status.HTTP_200_OK)\n\n        except Usuario.DoesNotExist:\n            return Response(status=status.HTTP_404_NOT_FOUND)\n\n        except KeyError:\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n@api_view(['GET'])\ndef GetAllPodcasts(request):\n\n    if request.method == \"GET\":\n\n        allPodcasts = Podcast.objects.all()\n        data = {}\n\n        for index in range(allPodcasts.count()):\n            data[allPodcasts[index].Nombre] = allPodcasts[index].getFotoDelPodcast(request.META['HTTP_HOST'])\n\n        return JsonResponse(data, safe=False, status=status.HTTP_200_OK)\n    else:\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n@api_view(['GET'])\ndef GetPodcastByTema(request):\n\n    if request.method == \"GET\":\n\n        tema=Tematica.objects.get(Nombre=request.query_params['NombreTema'])\n        allPodcasts = Podcast.objects.filter(Tematica=tema)\n        data = {}\n\n        for pod in allPodcasts:\n            podData = {}\n            podData['Foto'] = pod.getFotoDelPodcast(request.META['HTTP_HOST'])\n            podData['Idioma'] = (pod.Capitulos.all())[1].AudioRegistrado.Idioma\n            interlocutores = []\n            for i in Interlocutor.objects.filter(Podcasts=pod):\n                interlocutores.append(str(i))\n            podData['Interlocutores'] = interlocutores\n            podData['Descripcion'] = pod.Descripcion\n            data[pod.Nombre] = podData\n        return JsonResponse(data, safe=False, status=status.HTTP_200_OK)\n    else:\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n@api_view(['GET'])\ndef GetPodcastByInterlocutor(request):\n\n    if request.method == \"GET\":\n\n        podcaster=Interlocutor.objects.get(Nombre=request.query_params['NombreInterlocutor'])\n        allPodcasts = podcaster.Podcasts.all()\n        data = {}\n\n        for pod in allPodcasts:\n            podData = {}\n            podData['Foto'] = pod.getFotoDelPodcast(request.META['HTTP_HOST'])\n            podData['Idioma'] = (pod.Capitulos.all())[1].AudioRegistrado.Idioma\n            interlocutores = []\n            for i in Interlocutor.objects.filter(Podcasts=pod):\n                interlocutores.append(str(i))\n            podData['Interlocutores'] = interlocutores\n            podData['Descripcion'] = pod.Descripcion\n            data[pod.Nombre] = podData\n        return JsonResponse(data, safe=False, status=status.HTTP_200_OK)\n\n        return JsonResponse(data, safe=False, status=status.HTTP_200_OK)\n    else:\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n@api_view(['GET'])\ndef GetSubscribedPodcast(request):\n    if request.method == \"GET\":\n        try:\n            hashname = encrypt(str.encode(request.query_params['NombreUsuario'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n\n            allPodcasts = Podcast.objects.filter(Subscriptores=user)\n            data = {}\n\n            for pod in allPodcasts:\n                podData={}\n                podData['Foto']=pod.getFotoDelPodcast(request.META['HTTP_HOST'])\n                podData['Idioma'] = (pod.Capitulos.all())[1].AudioRegistrado.Idioma\n                interlocutores = []\n                for i in Interlocutor.objects.filter(Podcasts=pod):\n                    interlocutores.append(str(i))\n                podData['Interlocutores'] = interlocutores\n                podData['Descripcion'] = pod.Descripcion\n                data[pod.Nombre]=podData\n            return JsonResponse(data, safe=False, status=status.HTTP_200_OK)\n        except Usuario.DoesNotExist:\n            return Response(status=status.HTTP_404_NOT_FOUND)\n\n        except KeyError:\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n\n    else:\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n@api_view(['GET'])\ndef GetPodcastCaps(request):\n\n    if request.method == \"GET\":\n        try:\n            data = {}\n            #print(request.query_params['NombrePodcast'])\n            pod = Podcast.objects.get(Nombre=request.query_params['NombrePodcast'])\n            data['Foto']= pod.getFotoDelPodcast(request.META['HTTP_HOST'])\n            data['Tema']= str(pod.Tematica)\n            data['idioma'] = (pod.Capitulos.all())[1].AudioRegistrado.Idioma\n            interlocutores=[]\n            for i in Interlocutor.objects.filter(Podcasts=pod):\n                interlocutores.append(str(i))\n            data['Interlocutores'] = interlocutores\n            data['Descripcion'] = pod.Descripcion\n            capitulos=[]\n            i=1\n            for cap in pod.Capitulos.all().order_by('Fecha'):\n                capitulo={}\n                capitulo['numChapter'] = i\n                capitulo['nombre']=str(cap.AudioRegistrado)\n                capitulo['fecha'] = str(cap.Fecha)\n                capitulo['url'] = cap.AudioRegistrado.getURL(request.META['HTTP_HOST'])\n                capitulos.append(capitulo)\n                i=i+1\n\n            data['capitulos'] = capitulos\n            return JsonResponse(data, safe=False, status=status.HTTP_200_OK)\n        except Podcast.DoesNotExist:\n            return Response(status=status.HTTP_404_NOT_FOUND)\n    else:\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n@api_view(['GET'])\ndef GetMostListenedSongs(request):\n\n    if request.method == \"GET\":\n\n        try:\n            listOfAudios = []\n            listOfArtists = []\n            listOfGenders = []\n            listOfAlbuns = []\n            listOfImages = []\n            data = {}\n            index = 0\n            # Por el momento siempre es la misma\n            hashname = encrypt(str.encode(request.query_params['Usuario'])).hex()\n            audios = AudioEscuchado.objects.filter(Usuario__NombreUsuario=hashname).all().values('Audio__Titulo').annotate(total=Count('Audio__Titulo')).order_by('total').reverse()[:10]\n            for audio in audios:\n\n                if Cancion.objects.filter(AudioRegistrado__Titulo=audio['Audio__Titulo']).exists():\n\n                    song = Cancion.objects.get(AudioRegistrado__Titulo=audio['Audio__Titulo'])\n                    artistsOfSong = song.Artistas.all()\n                    for index2 in range(artistsOfSong.count()):\n                        listOfArtists += [artistsOfSong[index2].Nombre]\n                    albunsOfSong = song.Albunes.all()\n                    for index3 in range(albunsOfSong.count()):\n                        listOfAlbuns += [albunsOfSong[index3].NombreAlbum]\n                        listOfImages += [albunsOfSong[index3].getFotoDelAlbum(request.META['HTTP_HOST'])]\n\n                    gendersOfSong = song.Generos.all()\n                    for index4 in range(gendersOfSong.count()):\n                        listOfGenders += [gendersOfSong[index4].Nombre]\n\n                    listOfAudios += [\n                        dict.fromkeys({'Tipo', 'Titulo', 'Artistas', 'url', 'Albumes', 'ImagenesAlbums', 'Generos'})]\n                    listOfAudios[index]['Tipo'] = 'Cancion'\n                    listOfAudios[index]['Artistas'] = listOfArtists\n                    listOfAudios[index]['url'] = song.getURL(request.META['HTTP_HOST'])\n                    listOfAudios[index]['Albumes'] = listOfAlbuns\n                    listOfAudios[index]['ImagenesAlbums'] = listOfImages\n                    listOfAudios[index]['Generos'] = listOfGenders\n                    listOfAudios[index]['Titulo'] = song.AudioRegistrado.Titulo\n                    data[index] = listOfAudios[index]\n                    listOfArtists = []\n                    listOfGenders = []\n                    listOfAlbuns = []\n                    listOfImages = []\n\n                else:\n\n                    chapter = Capitulo.objects.get(AudioRegistrado__Titulo=audio['Audio__Titulo'])\n                    podcast = chapter.Capitulos.all()[0]\n                    listOfAudios[index] += [dict.fromkeys({'Tipo', 'Titulo', 'Imagen', 'Interlocutor'})]\n                    listOfAudios[index]['Tipo'] = 'Podcast'\n                    listOfAudios[index]['Imagen'] = podcast.getFotoDelPodcast(request.META['HTTP_HOST'])\n                    listOfAudios[index]['Interlocutor'] = podcast.Participan.all()[0].Nombre\n                    listOfAudios[index]['Titulo'] = listOfAudios[index]\n                    data[index] = listOfAudios[index]\n\n                index = index + 1\n            return JsonResponse(data, safe=False, status=status.HTTP_200_OK)\n        except Usuario.DoesNotExist:\n            return Response(status=status.HTTP_404_NOT_FOUND)\n        except KeyError:\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n@api_view(['POST'])\ndef CreateAlbum(request):\n    inform = {'inform': ''}\n\n    if request.method == 'POST':\n\n        hashname = encrypt(str.encode(request.data['NombreUsuario'])).hex()\n        try:\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n\n            if CreadorContenido.objects.filter(UsuarioRegistrado=user).exists():\n                del request.data['NombreUsuario']\n                request.data['Fecha'] = datetime.datetime.strptime(request.data['Fecha'], '%Y/%m/%d')\n                form = AlbumForm(request.data, request.FILES)\n                if form.is_valid():\n                    form.save()\n                    inform['inform'] = 'Album creado correctamente'\n                    return JsonResponse(inform, safe=False, status=status.HTTP_200_OK)\n                else:\n                    inform['inform'] = 'Campos invalidos'\n                    return JsonResponse(inform, safe=False, status=status.HTTP_400_BAD_REQUEST)\n            else:\n                inform['inform'] = 'El usuario no tiene permisos'\n            return JsonResponse(inform, safe=False, status=status.HTTP_401_UNAUTHORIZED)\n        except Usuario.DoesNotExist:\n            inform['inform'] = 'El usuario no existe'\n            return JsonResponse(inform, safe=False, status=status.HTTP_404_NOT_FOUND)\n    else:\n        inform['inform'] = 'La peticion debe ser POST'\n        return JsonResponse(inform, safe=False, status=status.HTTP_406_NOT_ACCEPTABLE)\n\n@api_view(['POST'])\ndef CreateSong(request):\n    inform = {'inform': ''}\n    if request.method == 'POST':\n        hashname = encrypt(str.encode(request.data['NombreUsuario'])).hex()\n\n        try:\n\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            if CreadorContenido.objects.filter(UsuarioRegistrado=user).exists():\n                del request.data['NombreUsuario']\n                request.data['CreadorDeContenido'] = CreadorContenido.objects.get(UsuarioRegistrado=user)\n                request.data['Duracion'] = float(request.data['Duracion'])\n                request.data['Artistas'] = request.data['Artistas'].split(',')\n                request.data['Generos'] = request.data['Generos'].split(',')\n                form = AudioForm(request.data, request.FILES)\n\n                for autor in request.data['Artistas']:\n\n                    if not Artista.objects.filter(Nombre=autor).exists():\n                        inform['inform'] = 'Autor ' + autor +' no existe'\n                        return JsonResponse(inform, safe=False, status=status.HTTP_404_NOT_FOUND)\n                for genero in request.data['Generos']:\n                    if not Genero.objects.filter(Nombre=genero).exists():\n                        inform['inform'] = 'Genero ' + genero +' no existe'\n                        return JsonResponse(inform, safe=False, status=status.HTTP_404_NOT_FOUND)\n\n                if form.is_valid() and Album.objects.filter(NombreAlbum=request.data['NombreAlbum']).exists():\n\n                    audio = form.save()\n                    Cancion(AudioRegistrado=audio).save()\n\n                    for artista in request.data['Artistas']:\n                        Artista.objects.get(Nombre=artista).Canciones.add(Cancion.objects.get(AudioRegistrado=audio))\n\n                    for genero in request.data['Generos']:\n                        Genero.objects.get(Nombre=genero).Canciones.add(Cancion.objects.get(AudioRegistrado=audio))\n\n                    Album.objects.filter(NombreAlbum=request.data['NombreAlbum']).all()[0].Canciones.add(Cancion.objects.get(AudioRegistrado=audio))\n                    inform['inform'] = 'Cancion creada correctamente'\n                    return JsonResponse(inform, safe=False, status=status.HTTP_200_OK)\n                else:\n\n                    inform['inform'] = 'Campos invalidos'\n                    return JsonResponse(inform, safe=False, status=status.HTTP_400_BAD_REQUEST)\n            else:\n                inform['inform'] = 'El usuario no tiene permisos'\n            return JsonResponse(inform, safe=False, status=status.HTTP_401_UNAUTHORIZED)\n        except Usuario.DoesNotExist:\n            inform['inform'] = 'El usuario no existe'\n            return JsonResponse(inform, safe=False, status=status.HTTP_404_NOT_FOUND)\n    else:\n        inform['inform'] = 'La peticion debe ser POST'\n        return JsonResponse(inform, safe=False, status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n\n\n@api_view(['POST'])\ndef CreateCapituloPodcast(request):\n    inform = {'inform': ''}\n    print('llego')\n    if request.method == 'POST':\n        print(request.data)\n\n        hashname = encrypt(str.encode(request.data['NombreUsuario'])).hex()\n        try:\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n\n            if CreadorContenido.objects.filter(UsuarioRegistrado=user).exists():\n                del request.data['NombreUsuario']\n                request.data['CreadorDeContenido'] = CreadorContenido.objects.get(UsuarioRegistrado=user)\n                request.data['Duracion'] = float(request.data['Duracion'])\n                request.data['Fecha'] = datetime.datetime.strptime(request.data['Fecha'], '%Y/%m/%d')\n                request.data['Interlocutores'] = request.data['Interlocutores'].split(',')\n                for interlocutor in request.data['Interlocutores']:\n                    if not Interlocutor.objects.filter(Nombre=interlocutor).exists():\n                        inform['inform'] = 'Interlocutor ' + interlocutor + ' no existe'\n                        return JsonResponse(inform, safe=False, status=status.HTTP_404_NOT_FOUND)\n                form = AudioForm(request.data, request.FILES)\n\n                if form.is_valid() and Podcast.objects.filter(Nombre=request.data['NombrePodcast']).exists():\n\n                    audio = form.save()\n                    Capitulo(AudioRegistrado=audio, Fecha=request.data['Fecha']).save()\n                    Podcast.objects.filter(Nombre=request.data['NombrePodcast']).all()[0].Capitulos.add(Capitulo.objects.get(AudioRegistrado=audio))\n                    for interlocutor in request.data['Interlocutores']:\n                        Interlocutor.objects.get(Nombre=interlocutor).Podcasts.add(Podcast.objects.get(Nombre=request.data['NombrePodcast']))\n                    inform['inform'] = 'Capitulo creado correctamente'\n                    return JsonResponse(inform, safe=False, status=status.HTTP_200_OK)\n                else:\n\n                    inform['inform'] = 'Campos invalidos'\n                    return JsonResponse(inform, safe=False, status=status.HTTP_400_BAD_REQUEST)\n            else:\n                inform['inform'] = 'El usuario no tiene permisos'\n            return JsonResponse(inform, safe=False, status=status.HTTP_401_UNAUTHORIZED)\n        except Usuario.DoesNotExist:\n            inform['inform'] = 'El usuario no existe'\n            return JsonResponse(inform, safe=False, status=status.HTTP_404_NOT_FOUND)\n    else:\n        inform['inform'] = 'La peticion debe ser POST'\n        return JsonResponse(inform, safe=False, status=status.HTTP_406_NOT_ACCEPTABLE)\n\n@api_view(['POST'])\ndef CreatePodcast(request):\n    inform = {'inform': ''}\n\n    if request.method == 'POST':\n\n        hashname = encrypt(str.encode(request.data['NombreUsuario'])).hex()\n        try:\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            request.data['Tema'] = Tematica.objects.get(Nombre=request.data['Tema'])\n            if CreadorContenido.objects.filter(UsuarioRegistrado=user).exists():\n                del request.data['NombreUsuario']\n                form = PodcastForm(request.data,request.FILES)\n                if form.is_valid():\n                    form.save()\n\n                    inform['inform'] = 'Podcast creado correctamente'\n                    return JsonResponse(inform, safe=False, status=status.HTTP_200_OK)\n                else:\n                    inform['inform'] = 'Campos invalidos'\n                    return JsonResponse(inform, safe=False, status=status.HTTP_400_BAD_REQUEST)\n            else:\n                inform['inform'] = 'El usuario no tiene permisos'\n            return JsonResponse(inform, safe=False, status=status.HTTP_401_UNAUTHORIZED)\n        except Usuario.DoesNotExist:\n            inform['inform'] = 'El usuario no existe'\n            return JsonResponse(inform, safe=False, status=status.HTTP_404_NOT_FOUND)\n    else:\n        inform['inform'] = 'La peticion debe ser POST'\n        return JsonResponse(inform, safe=False, status=status.HTTP_406_NOT_ACCEPTABLE)\n\n@api_view(['POST'])\ndef FollowPodcast(request):\n\n    if request.method == \"POST\":\n        try:\n            hashname = encrypt(str.encode(request.data['NombreUsuario'])).hex()\n\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            Podcast.objects.get(Nombre=request.data['NombrePodcast']).Subscriptores.add(user)\n            return Response(status=status.HTTP_200_OK)\n\n        except Usuario.DoesNotExist:\n\n            return Response(status=status.HTTP_404_NOT_FOUND)\n        except Podcast.DoesNotExist:\n\n            return Response(status=status.HTTP_404_NOT_FOUND)\n\n        except KeyError:\n\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n@api_view(['POST'])\ndef UnfollowPodcast(request):\n\n    if request.method == \"POST\":\n        try:\n            hashname = encrypt(str.encode(request.data['NombreUsuario'])).hex()\n\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            Podcast.objects.get(Nombre=request.data['NombrePodcast']).Subscriptores.remove(user)\n            return Response(status=status.HTTP_200_OK)\n\n        except Usuario.DoesNotExist:\n\n            return Response(status=status.HTTP_404_NOT_FOUND)\n        except Podcast.DoesNotExist:\n\n            return Response(status=status.HTTP_404_NOT_FOUND)\n\n        except KeyError:\n\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n@api_view(['POST'])\ndef RemoveAudio(request):\n\n    if request.method == \"POST\":\n        try:\n            hashname = encrypt(str.encode(request.data['NombreUsuario'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            if CreadorContenido.objects.filter(UsuarioRegistrado=user).exists():\n\n                Audio.objects.get(Titulo=request.data['Titulo']).delete()\n                return Response(status=status.HTTP_200_OK)\n            else:\n                return Response(status=status.HTTP_404_NOT_FOUND)\n        except Usuario.DoesNotExist:\n\n            return Response(status=status.HTTP_404_NOT_FOUND)\n\n        except Audio.DoesNotExist:\n\n            return Response(status=status.HTTP_404_NOT_FOUND)\n\n        except KeyError:\n\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n@api_view(['POST'])\ndef RemoveAudio(request):\n\n    if request.method == \"POST\":\n        try:\n            hashname = encrypt(str.encode(request.data['NombreUsuario'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            if CreadorContenido.objects.filter(UsuarioRegistrado=user).exists():\n\n                Audio.objects.get(Titulo=request.data['Titulo']).delete()\n                return Response(status=status.HTTP_200_OK)\n            else:\n                return Response(status=status.HTTP_404_NOT_FOUND)\n        except Usuario.DoesNotExist:\n\n            return Response(status=status.HTTP_404_NOT_FOUND)\n\n        except Audio.DoesNotExist:\n\n            return Response(status=status.HTTP_404_NOT_FOUND)\n\n        except KeyError:\n\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n@api_view(['POST'])\ndef SongUpdate(request):\n\n    if request.method == \"POST\":\n        try:\n            hashname = encrypt(str.encode(request.data['NombreUsuario'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            if CreadorContenido.objects.filter(UsuarioRegistrado=user).exists():\n                audio = Audio.objects.get(Titulo=request.data['Titulo'])\n                audio.Titulo = request.data['Titulo']\n                audio.Duracion = float(request.data['Duracion'])\n                audio.FicheroDeAudio = request.data['FicheroDeAudio']\n                audio.Idioma = request.data['Idioma']\n                audio.save()\n\n                return Response(status=status.HTTP_200_OK)\n            else:\n                return Response(status=status.HTTP_404_NOT_FOUND)\n        except Usuario.DoesNotExist:\n\n            return Response(status=status.HTTP_404_NOT_FOUND)\n\n        except Audio.DoesNotExist:\n\n            return Response(status=status.HTTP_404_NOT_FOUND)\n\n        except KeyError:\n\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)\n\n\n@api_view(['POST'])\ndef ChapterUpdate(request):\n\n    if request.method == \"POST\":\n        try:\n            hashname = encrypt(str.encode(request.data['NombreUsuario'])).hex()\n            user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))\n            if CreadorContenido.objects.filter(UsuarioRegistrado=user).exists():\n                audio = Audio.objects.get(Titulo=request.data['Titulo'])\n                capitulo = Capitulo.objects.get(AudioRegistrado=audio)\n                audio.Titulo = request.data['Titulo']\n                audio.Duracion = float(request.data['Duracion'])\n                audio.FicheroDeAudio = request.data['FicheroDeAudio']\n                audio.Idioma = request.data['Idioma']\n                capitulo.Fecha = datetime.datetime.strptime(request.data['Fecha'], '%Y/%m/%d')\n                capitulo.save()\n                audio.save()\n\n                return Response(status=status.HTTP_200_OK)\n            else:\n                return Response(status=status.HTTP_404_NOT_FOUND)\n        except Usuario.DoesNotExist:\n\n            return Response(status=status.HTTP_404_NOT_FOUND)\n\n        except Audio.DoesNotExist:\n\n            return Response(status=status.HTTP_404_NOT_FOUND)\n\n        except Capitulo.DoesNotExist:\n\n            return Response(status=status.HTTP_404_NOT_FOUND)\n\n        except KeyError:\n\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n    else:\n\n        return Response(status=status.HTTP_406_NOT_ACCEPTABLE)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- playstackDjango/App/PlayStack/views.py	(revision c789f6e5e81ad778d8397a2142e01e7267208927)
+++ playstackDjango/App/PlayStack/views.py	(date 1590248436769)
@@ -565,7 +565,7 @@
         data = {}
         # Por el momento siempre es la misma
         hashname = encrypt(str.encode(request.query_params['Usuario'])).hex()
-        audio = AudioEscuchado.objects.filter(Usuario__NombreUsuario=hashname).order_by('TimeStamp').reverse().first()
+        audio = AudioEscuchado.objects.filter(Usuario__NombreUsuario=hashname, Audio__in=Cancion.objects.only('AudioRegistrado')).order_by('TimeStamp').reverse().first()
         user = Usuario.objects.get(Q(NombreUsuario=hashname) | Q(Correo=hashname))
         if audio is not None:
             song = Cancion.objects.get(AudioRegistrado=audio.Audio)
Index: playstackDjango/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"playstackDjango URL Configuration\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/1.11/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  url(r'^$', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  url(r'^$', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.conf.urls import url, include\n    2. Add a URL to urlpatterns:  url(r'^blog/', include('blog.urls'))\n\"\"\"\nfrom django.conf.urls import url, include\nfrom django.contrib import admin\nfrom playstackDjango.App.PlayStack.resources import *\nfrom playstackDjango.App.PlayStack import views\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nuser_resource = UsuarioResource()\n\nurlpatterns = [\n\n    # ¡¡¡ Se marcan con * las url ya documentadas en swaggerhub !!!\n    # ¡¡¡ Se marcan con ^ las url pendientes de actualizar en swaggerhub !!!\n\n    url('admin/', admin.site.urls),\n    # Ruta dentro del servidor para acceder al recurso UsuarioResource\n    url('usuarios/', include(user_resource.urls)),\n    url('search/', views.Search, name='Search'), # *\n    url('create/folder', views.CreateFolder, name='CreateFolder'),  # *\n    url('create/album', views.CreateAlbum, name='CreateAlbum'), # *\n    url('create/podcastchapter', views.CreateCapituloPodcast, name='CreateCapituloPodcast'), # *\n    url('create/podcast', views.CreatePodcast, name='CreatePodcast'), # *\n    url('create/song', views.CreateSong, name='CreateSong'),\n    url('create/user', views.CreateUser, name='CreateUser'),    # *\n    url('create/user/withimg', views.CreateUserImg, name='CreateUserImg'), # * Falta poner fichero\n    url('create/playlist', views.CreatePlayList, name='CreatePlayList'),\n    url('audio/remove', views.RemoveAudio, name='RemoveAudio'),\n    url('song/update', views.SongUpdate, name='SongUpdate'),\n    url('chapter/update', views.ChapterUpdate, name='ChapterUpdate'),\n    url('get/allusers', views.GetAllUser, name='GetAllUser'), # *\n    url('get/allsongs', views.GetAllSongs, name='GetAllSongs'), # ^\n    url('get/allartists', views.GetAllArtists, name='GetAllArtists'),  # *\n    url('get/allgenders', views.GetAllGenders, name='GetAllGenders'),\n    url('get/allpodcasts', views.GetAllPodcasts, name='GetAllPodcasts'),\n    url('get/podcast/all', views.GetPodcastCaps, name='GetPodcastCaps'),\n    url('get/podcast/bytema', views.GetPodcastByTema, name='GetPodcastByTema'),\n    url('get/podcast/byinterlocutor', views.GetPodcastByInterlocutor, name='GetPodcastByInterlocutor'),\n    url('get/podcast/followed', views.GetSubscribedPodcast, name='GetSubscribedPodcast'),\n    url('get/randomalbums', views.GetRandomAlbums, name='GetRandomAlbums'),  # *\n    url('get/song/bygenre', views.GetSongByGenre, name='GetSongByGenre'), # *\n    url('get/song/byartist', views.GetSongByArtist, name='GetSongByArtist'),  # *\n    url('get/song/byalbum', views.GetSongByAlbum, name='GetSongByAlbum'),  # *\n    url('get/artist/albums', views.GetArtistAlbums, name='GetArtistAlbums'),  # *\n    #url('get/artist/singles', views.GetArtistAlbums, name='GetArtistAlbums'),  # *\n    url('get/audio', views.GetAudio, name='GetAudio'), # *\n    url('get/song', views.GetSong, name='GetSong'), # *\n    url('get/chapter', views.GetPodcastChapter, name='GetPodcastChapter'), # *\n    url('get/folders', views.GetUserFolders, name='GetUserFolders'),  # *\n    url('get/playlists', views.GetUserPlaylists, name='GetUserPlaylists'),  # *\n    url('get/playlist/songs', views.GetPlaylistSongs, name='GetPlaylistSongs'),  # *\n    url('get/publicplaylists', views.GetUserPublicPlaylists, name='GetUserPublicPlaylists'),  # *\n    url('get/favoritesongs', views.GetFavoriteSongs, name='GetFavoriteSongs'),  # *\n    url('user/login', views.Login, name='Login'),  # *\n    url('user/get/info', views.GetUserInfo, name='GetUserInfo'),  # *\n    url('user/get/permissions', views.GetPermissions, name='GetPermissions'),\n    url('user/get/lastsongs', views.GetLastSongs, name='GetLastSongs'),\n    url('user/get/lastsong', views.GetLastSong, name='GetLastSong'),\n    url('user/get/profilephoto', views.GetProfilePhoto, name='GetProfilePhoto'),\n    url('user/get/followrequests', views.GetFollowRequests, name='GetFollowRequests'),\n    url('user/get/following', views.GetFollowing, name='GetFollowing'),\n    url('user/get/followers', views.GetFollowers, name='GetFollowers'),\n    url('user/get/mostListenedSongs', views.GetMostListenedSongs, name='GetMostListenedSongs'),\n    url('user/givepermissions', views.GivePermissions, name='GivePermissions'),  # *\n    url('user/update/playlist', views.updatePlaylist, name='updatePlaylist'),\n    url('user/update/folder', views.updateFolder, name='updateFolder'),\n    url('user/update/image', views.UpdatePerfilImage, name='UpdatePerfilImage'), # *\n    url('user/update/permissions', views.UpdatePermissions, name='UpdatePermissions'), # *\n    url('user/update/fields', views.UpdateUserFields, name='UpdateUserFields'),  # ^\n    url('user/add/request', views.AddRequest, name='AddRequest'),\n    url('user/add/song/tofavorites', views.AddSongToFavorites, name='AddSongToFavorites'),\n    url('user/add/song/tolistened', views.AddSongToListened, name='AddSongToListened'),\n    url('user/add/song/toplaylist', views.AddSongToPlayList, name='AddSongToPlayList'),\n    url('user/add/playlist/tofolder', views.addPlayListToFolder, name='addPlayListToFolder'),\n    url('user/add/followRequest', views.AddUserFollowResquest, name='AddUserFollowResquest'), #Enviar solicitud de follow\n    url('user/remove/followRequest', views.RemoveUserFollowResquest, name='RemoveUserFollowResquest'),\n    url('user/reject/followRequest', views.RejectFollowResquest, name='RejectFollowResquest'),\n    url('user/remove/follower', views.AddUserFollowResquest, name='RemoveFollower'),\n    url('user/remove/song/fromfavorites', views.RemoveSongFromFavorites, name='RemoveSongFromFavorites'),\n    url('user/remove/song/fromplaylist', views.removePlaylistSong, name='removePlaylistSong'),\n    url('user/remove/playlist/fromfolder', views.removePlayListFromFolder, name='removePlayListFromFolder'),\n    url('user/remove/playlist/', views.removePlaylist, name='removePlaylist'),\n    url('user/remove/folder/', views.removeFolder, name='removeFolder'),\n    url('user/search', views.SearchUser, name='SearchUser'),\n    url('user/socialsearch', views.SearchUserSocial, name='SearchUserSocial'),\n    url('user/follow/podcast', views.FollowPodcast, name='FollowPodcast'),\n    url('user/follow', views.Follow, name='Follow'),     #Aceptar solicitud de follow\n    url('user/unfollow/podcast', views.UnfollowPodcast, name='UnfollowPodcast'),\n    url('user/unfollow', views.Unfollow, name='Unfollow'),\n    url('user/askforpremium', views.AskForPremium, name='AskForPremium')\n\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- playstackDjango/urls.py	(revision c789f6e5e81ad778d8397a2142e01e7267208927)
+++ playstackDjango/urls.py	(date 1590245053486)
@@ -38,7 +38,7 @@
     url('create/song', views.CreateSong, name='CreateSong'),
     url('create/user', views.CreateUser, name='CreateUser'),    # *
     url('create/user/withimg', views.CreateUserImg, name='CreateUserImg'), # * Falta poner fichero
-    url('create/playlist', views.CreatePlayList, name='CreatePlayList'),
+    url('create/playlist', views.CreatePlayList, name='CreatePlayList'), # *
     url('audio/remove', views.RemoveAudio, name='RemoveAudio'),
     url('song/update', views.SongUpdate, name='SongUpdate'),
     url('chapter/update', views.ChapterUpdate, name='ChapterUpdate'),
